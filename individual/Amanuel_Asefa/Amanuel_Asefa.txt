Lesson 1: Programming for a Purpose
Lesson 2: Plotting Shapes
Lesson 3: Drawing in Game Lab


Lesson 4: Shapes and Parameters

Overview

  - The Lesson Starts with "How can we use parameters to give the computer more specific instructions?"
  - the main idea of the lesson so far is manipulating the "parameters" of the shapes to control their appearance.

Vocabulary

  - Parameter - Additional information provided as input to a block to customize its functionality

Introduced Code

  - background(color) -> sets the background color of the canvas to the parameters color
  - ellipse(x, y, w, h) -> the newly Introduced parameters are used to identify the width and height of the ellipse being constructed 
  - rect(x, y, w, h) -> the newly Introduced parameters are used to identify the width and height of the rectangle being constructed 

one example of the above methods would be

//Debug this program to make the cloud wider than it is tall, like in the image.

// Draw sky
background("skyblue");

// Draw sun
fill("yellow");
ellipse(300,50,50,50);

// Draw grass
fill("green");
rect(0,300,400,100);

// Draw cloud
fill("white");
ellipse(150,100,200,100);

- Regular Polygon practise excercise

regularPolygon(50, 75, 3, 50);
regularPolygon(150, 75, 4, 50);
regularPolygon(50, 175, 7, 50);
regularPolygon(50, 275, 11, 50);
// Add code to finish the drawing so it matches the picture
regularPolygon(250, 75, 5, 50)
regularPolygon(350, 75, 6, 50)
regularPolygon(150, 175, 8, 50);
regularPolygon(250, 175, 9, 50);
regularPolygon(350, 175, 10, 50);

regularPolygon(150, 275, 12, 50);
regularPolygon(250, 275, 13, 50);
regularPolygon(350, 275, 14, 50);

 - new blocks shape example

fill("red");
shape(200, 200, 0, 400, 400, 400);
fill("blue");
shape(200, 200, 0, 0, 400, 0);
// Finish the code so it matches the picture
fill("green")
shape(0,0,200,200, 0,400)

fill("yellow")
shape(400,0,200,200, 400,400)

 - drawing complicated Lines

 line(0, 0, 50, 400);
line(0, 50, 100, 400);
line(0, 100, 150, 400);
line(0, 150, 200, 400);
line(0, 200, 250, 400);
line(0, 250, 300, 400);
line(0, 300, 350, 400);
line(0, 350, 400, 400);
// Finish the code so it matches the picture
line(0, 0, 400, 0);
line(400, 0, 400, 400);
line(350, 0, 400, 300);
line(250, 0, 400, 200);
line(150, 0, 400, 100);

line(200, 0, 400, 150);
line(300, 0, 400, 250);
line(100, 0, 400, 100);
line(150, 0, 400, 150);

 - new block arc

arc(50, 100, 100, 100, 0, 360);
arc(200, 100, 100, 100, 0, 300);
fill("green");
arc(350, 100, 100, 100, 90, 180);
noFill();
arc(50, 200, 100, 100, 0, 180);
arc(200, 200, 100, 100, 30, 210);
//Create two more shapes on the screen using the arc block!
fill("red")
arc(300, 300, 100, 100, 0,60);

fill("red")
arc(200, 200, 100, 100, 0,270);

- Lesson 5: Variables
    - Overview
    - Question of the Day: How can we use variables to store information in our programs?


    - Vocabulary
        - Variable - A label for a piece of information used in a program.

    - Introduced Code
    - var x = ___;

    - var x;

- Debug Adding a variables

// Update the variable names at the top of the code
var size = 100;
var color1 = "green";
var color2 = "red";
var color3 = "orange";

// Read through the code and identify the four variables
fill(color1);
ellipse(200, 100, size, size);
noFill();
rect(150, 50, size, size);
fill(color2);
ellipse(200, 200, size, size);
noFill();
rect(150, 150, size, size);
fill(color3);
ellipse(200, 300, size, size);
noFill();
rect(150, 250, size, size);

    -using variables excercise

// Change the program to use the eyeSize variable.
var eyeSize = 27;

noStroke();
background("green");

// Face
fill("yellow");
ellipse(200,200,200,200);

// Eyes
fill("black");
ellipse(160,170,eyeSize,eyeSize);
ellipse(240,170,eyeSize,eyeSize);

// Mouth
fill("white");
rect(160,240,80,20);


    - Challenge -> updating variables

var x = 50;
var y = 50;

fill("red");
ellipse(x, y);
// Increase x by 50, now x is 100
y = y + 50;
ellipse(x, y);
// Increase x by 50, now x is 150
y = y + 50;
ellipse(x, y);

    - String Variables

var color1 = "green";
var color2 = "yellow";
var color3 = "red";


fill(color1);
regularPolygon(200, 200, 5, 200);
fill(color2);
regularPolygon(200, 200, 6, 150);
fill(color3);
regularPolygon(200, 200, 7, 100);

    - Abstract Art 

var flagWidth = 400;
var flagHeight = 250;
var circleSize = 100;
var circleX = flagWidth / 2;
var circleY = flagHeight / 2;
var stripeHeight = 50;
var stripeColor1 = "skyblue";
var stripeColor2 = "white";

fill("green");
rect(0, 0, flagWidth, flagHeight);  

fill(stripeColor1);
rect(0, 0, flagWidth, stripeHeight);  
fill(stripeColor2);
rect(0, stripeHeight, flagWidth, stripeHeight); 

fill("yellow");
ellipse(circleX, circleY, circleSize, circleSize); 

stroke("black");
strokeWeight(5);
noFill();
rect(0, 0, flagWidth, flagHeight);  


    -Random Numbers
    You have a new block in the Math drawer called randomNumber().
    If you make your drawings with random numbers it will look a little bit 
    different every time you run your program. Click on the block to read
    it's documentation and learn more about how it works

    Right now, the program only draws the ellipse on the right side of the screen.
    Let's update the code so the ellipse could appear anywhere horizontally on the screen.

background("tomato");

// Change the code so the ellipse can appear anywhere horizontally on the screen
fill("orange");
ellipse(randomNumber(0,400), 200, 50, 50);

    - randomNumber(xin,yin) generates random number between the given intervals

    - modifying the scence practise

background("lightblue");
// Randomize the x position of the sun
fill("yellow");
ellipse(randomNumber(0,400), 50);
// Randomize the x position of the mountains
fill("brown");
regularPolygon(randomNumber(0,400), 300, 3, 200);
regularPolygon(randomNumber(0,400), 300, 3, 200);
regularPolygon(randomNumber(0,400), 300, 3, 250);
regularPolygon(randomNumber(0,400), 300, 3, 250);
regularPolygon(randomNumber(0,400), 300, 3, 250);
fill("lightgreen");
rect(0, 300, 400, 100);


    - rainbow

//2) Add at least three new different colored circles to your rainbow snake.
//3) Use randomNumber to make the rest of the snake's body move up and down like the first three.

background("skyBlue");

fill("red");
ellipse(100, randomNumber(190,210), 50, 50);

fill("orange");
ellipse(140, randomNumber(190,210), 50, 50);

fill("yellow");
ellipse(180, randomNumber(190,210), 50, 50);

fill("green");
ellipse(220, randomNumber(190,210), 50, 50);

fill("blue");
ellipse(260, randomNumber(190,210), 50, 50);

fill("violate");
ellipse(300, randomNumber(190,210), 50, 50);


- challenges

// Update the background to be a random color
background(rgb(randomNumber(0,255), randomNumber(0,255), randomNumber(0,255)));

// Update each arc of the rainbow to a random color
fill(rgb(randomNumber(0,255), randomNumber(0,255), randomNumber(0,255)));
ellipse(200, 200, 400, 400);
fill(rgb(randomNumber(0,255), randomNumber(0,255), randomNumber(0,255)));
ellipse(200, 200, 340, 340);
fill(rgb(randomNumber(0,255), randomNumber(0,255), randomNumber(0,255)));
ellipse(200, 200, 280, 280);
fill(rgb(randomNumber(0,255), randomNumber(0,255), randomNumber(0,255)));
ellipse(200, 200, 220, 220);
fill(rgb(randomNumber(0,255), randomNumber(0,255), randomNumber(0,255)));
ellipse(200, 200, 160, 160);
fill(rgb(randomNumber(0,255), randomNumber(0,255), randomNumber(0,255)));
ellipse(200, 200, 100, 100);
fill(rgb(randomNumber(0,255), randomNumber(0,255), randomNumber(0,255)));
ellipse(200, 200, 40, 40);

// Update the ground to a random color
fill(rgb(randomNumber(0,255), randomNumber(0,255), randomNumber(0,255)));
rect(0, 200, 400, 200);

- random Lines

// Randomize the position of each of the lines

var x1 = randomNumber(0,400)
var x2 = randomNumber(0,400)

var y1 = randomNumber(0,400)
var y2 = randomNumber(0,400)

line(x1, 0, 0, 150);
line(x1, 200, 0, 350);
line(x1, 0, 100, 150);
line(x1, 200, 100, 350);
line(x1, 0, 200, 150);
line(x1, 200, 200, 350);
line(x1, 0, 300, 150);
line(x1, 200, 300, 350);


- Lesson 7
    -robot Face

regularPolygon(200, 175, 6, 90);
fill("white")
ellipse(165,150,20,20)

fill("white")
ellipse(225,150,20,20)

fill("white")
rect(170, 200,56, 10);

fill("black")
ellipse(150,90,20,20)

fill("black")
ellipse(170,90,20,20)

fill("black")
ellipse(190,90,20,20)

fill("black")
ellipse(210,90,20,20)

fill("black")
ellipse(230,90,20,20)

fill("black")
ellipse(250,90,20,20)

fill("black")
ellipse(160,75,20,20)

fill("black")
ellipse(180,75,20,20)

fill("black")
ellipse(200,75,20,20)

fill("black")
ellipse(220,75,20,20)

fill("black")
ellipse(240,75,20,20)


- Lesson 8: Sprites
    Overview
        - How can we use sprites to help us keep track of lots of information in our programs?

Today you will learn about sprites which will not only give you a way to keep track of various pieces of information in your programs but will also allow you to create more interesting and fun images!

- Vocabulary
    
    Sprite - A character on the screen with properties that describe its location, movement, and look.

Introduced Code

    - drawSprites()

    - sprite.setAnimation(label)

    - var sprite = createSprite(x, y, w, h)


excercise - creative thinking

background("lightblue");
// Randomize the x position of the sun
fill("yellow");
ellipse(randomNumber(0,400), 50);
// Randomize the x position of the mountains
fill("brown");
regularPolygon(randomNumber(0,400), 300, 3, 200);
regularPolygon(randomNumber(0,400), 300, 3, 200);
regularPolygon(randomNumber(0,400), 300, 3, 250);
regularPolygon(randomNumber(0,400), 300, 3, 250);
regularPolygon(randomNumber(0,400), 300, 3, 250);
fill("lightgreen");
rect(0, 300, 400, 100);

added a text "Get Ready"

background("lightblue");
// Randomize the x position of the sun
fill("yellow");
ellipse(randomNumber(0,400), 50);
// Randomize the x position of the mountains
fill("brown");
regularPolygon(randomNumber(0,400), 300, 3, 200);
regularPolygon(randomNumber(0,400), 300, 3, 200);
regularPolygon(randomNumber(0,400), 300, 3, 250);
regularPolygon(randomNumber(0,400), 300, 3, 250);
regularPolygon(randomNumber(0,400), 300, 3, 250);
fill("lightgreen");
rect(0, 300, 400, 100);
var sprite = createSprite(200, 200);
sprite.setAnimation("textGetReady");
drawSprites()

 - Uploading images

 // Create kite sprite and set animation
var kite = createSprite(300, 50);
kite.setAnimation("sprite.png_1");

// Draw background
background("skyblue");

// Draw grass
fill("green");
noStroke();
rect(0, 300, 400, 100);

// Draw string
stroke("black");
strokeWeight(5);
line(150, 300, 300, 50);

// Draw sprite
drawSprites();



Lesson 9: Sprite Properties
Overview
Question of the Day: How can we use sprite properties to change their appearance on the screen?

In this lesson, you will continue working with sprites, using their properties to change their appearance.

Vocabulary
Dot notation - the way that sprites' properties are used in Game Lab, by connecting the sprite and property with a dot.
Property - A label for a characteristic of a sprite, such as its location and appearance
Introduced Code
sprite.rotation

sprite.scale

sprite.x

sprite.y

 - skill building level 2

 // Run the program to see where the sprites appear.
var palette = createSprite();
palette.setAnimation("paint_palette");
var brush = createSprite();
brush.setAnimation("paint_brush");
palette.x = 100;
palette.y = 300;
// Change the location of the paint brush to touch the paint palette.
brush.x= 103;
brush.y = 276;
drawSprites();


    - Scaling Property

// Fix the code so that it looks like the picture.
background("darkseagreen");
fill("deepskyblue");
ellipse(75, 75, 75, 75);
var fly = createSprite(25, 25);
fly.setAnimation("fly");
fly.scale = 1;

var fish = createSprite(75, 75);
fish.setAnimation("fish");
fish.scale = 0.5;

var cow = createSprite(150, 150);
cow.setAnimation("cow");
cow.scale = 0.4;

var elephant = createSprite(300, 300);
elephant.setAnimation("elephant");
elephant.scale = 0.7;

drawSprites();

challenges

// Add text to the scene so that it matches the scene in the picture
var field = createSprite(200, 200);
field.setAnimation("field");
var ball = createSprite(200, 200);
ball.setAnimation("ball");
ball.scale = 0.15;


drawSprites();
fill("white")
text("Red Score: 3", 0, 40)

fill("white")
text("Red Score: 3", 331, 40)


    - lesson 11
    -create your scene

var sprite = createSprite(200, 200);
sprite.setAnimation("bg.jpg_1");
var sprite1 = createSprite(264, 286);
sprite1.setAnimation("animalhead_arcticfox_1");
sprite1.scale = 0.1


drawSprites()


fill("white")
var t =text("Mario", 200, 100)
t.scale(4)
textSize(200)


    - lesson 12

    - functions - the draw function is run over and over again by the game lab
noStroke();
fill("SeaGreen");

function draw(){
  ellipse(randomNumber(0,400), randomNumber(0,400));
}

// Add code to this program so that your drawing has orange circles being drawn, too.
noStroke();

function draw(){
  fill("green");
  ellipse(randomNumber(0,400), randomNumber(0,400));
  fill("orange");
  ellipse(randomNumber(0,400), randomNumber(0,400));
}

    - a nice simple trick inorder to clear the screen

World.frameRate = 5;

noStroke();
background("blue");
fill("Yellow");

function draw(){
  background("Red");
  ellipse(randomNumber(0,400), randomNumber(0,400));
}

    - change while drawing
// Run the program to see how it works.
var pencil = createSprite(100,200);
pencil.setAnimation("pencil");

var brush = createSprite(300,200);
brush.setAnimation("brush");

function draw(){
  background("white");
  pencil.x = randomNumber(100,110);
  brush.x = randomNumber(300,310);
  // Edit the code in this program to make the second sprite shake like the first one.

  drawSprites();
}

    - Debug: Sprite Not Moving


     drawSprites(); 

     - Updating Properties

// Add the draw loop block to the bottom of this program.
// Move any blocks that need to be inside the draw loop.

var salt = createSprite(200,200);
salt.setAnimation("salt");
background("skyblue");
drawSprites();

function draw(){
  background("skyblue");
  salt.y = randomNumber(200,100)
  drawSprites();
}

    - Extend Your Scene
var sprite = createSprite(200, 200);
sprite.setAnimation("bg.jpg_1");
var sprite1 = createSprite(264, 286);
sprite1.setAnimation("animalhead_arcticfox_1");
sprite1.scale = 0.1





fill("white")
var t =text("Mario", 200, 100)
t.scale(4)
textSize(200)

function draw(){
  sprite1.x=randomNumber(100,200)
  drawSprites()
}

lesson 13 : Sprite movement

The Counter Pattern

This program creates a variable counter and then uses the counter pattern to make it count up.

var counter = 0;

function draw(){
  background("white");
  textSize(counter);
  text(counter, 0, 400);
  counter = counter + 1;
}

Sprite Movement


var jet = createSprite(350, 350);
jet.setAnimation("jet");
var plane = createSprite(50, 200);
plane.setAnimation("plane");

function draw() {
  background("skyblue");
  
  //1) Read the code that makes the jet go up the screen
  jet.y = jet.y - 3;
  plane.x = plane.x + 3
  


  Moving to the Left

  var fly = createSprite(350, 200);
fly.setAnimation("fly");

function draw() {
  background("skyblue");
  //1) Use the counter pattern to make the sprite move to the left.
  fly.x = fly.x - 3

  drawSprites();
}

Diagonal Movement

//1) Read the code that makes the mouse go down.
//2) Run the program and look at the watchers to see what is happening 

var mouse = createSprite(50, 50);
mouse.setAnimation("mouse");
mouse.scale = 0.5;

function draw() {
  background("lightgreen");
  mouse.y = mouse.y + 2;
  mouse.x = mouse.x + 2;
  //3) Add one more line of code to make the mouse move diagonally.
  
  drawSprites();
}

//4) Run your code again and look at the watchers.


Debug: Watching the Counter Pattern


//1) Take a look at the value in the watcher
//2) Add a watcher for the y property
//3) Run the program to see what happens to the properties and why the motorcycle disappears
//4) Debug the code so the program runs like the image

var cycle = createSprite(0, 400);
cycle.setAnimation("motorcycle");
cycle.rotation = 45;

function draw() {
  background("lightgrey");
  cycle.x = cycle.x + 10;
  cycle.y = cycle.y - 10;
  drawSprites();
}

Fish Animation


var orangeFish = createSprite(400, randomNumber(0, 100));
orangeFish.setAnimation("orange_fish");
var blueFish = createSprite(250, randomNumber(0, 200));
blueFish.setAnimation("blue_fish");
var greenFish = createSprite(300, randomNumber(200, 300));
greenFish.setAnimation("green_fish");

function draw() {
  // Draw Background
  background("navy");
  
  // Update Values
  orangeFish.x = orangeFish.x - 2;
  blueFish.x = blueFish.x - 4
  greenFish.x = greenFish.x - 3
  
  //1) Use the counter pattern to make the blue fish move across the screen faster than the other fish

  //2) Use the counter pattern to make the green fish move across the screen slower than the other fish.
  
  // Draw Animations
  drawSprites();
}

More Fish


var orangeFish = createSprite(400, randomNumber(0, 100));
orangeFish.setAnimation("orange_fish");
var blueFish = createSprite(250, randomNumber(0, 200));
blueFish.setAnimation("blue_fish");
var greenFish = createSprite(300, randomNumber(200, 300));
greenFish.setAnimation("green_fish");

function draw() {
  // Draw Background
  background("navy");
  
  // Update Values
  orangeFish.x = orangeFish.x - 2;
  blueFish.x = blueFish.x - 4;
  greenFish.x = greenFish.x - 3;
  
  orangeFish.rotation = orangeFish.rotation + randomNumber(1, 10);
  orangeFish.rotation = orangeFish.rotation - randomNumber(1, 10);
  
  blueFish.rotation = blueFish.rotation + randomNumber(1, 10);
  blueFish.rotation = blueFish.rotation - randomNumber(1, 10);
  
  greenFish.rotation = greenFish.rotation + randomNumber(1, 10);
  greenFish.rotation = greenFish.rotation - randomNumber(1, 10);
  
  
  
  drawSprites();
}

lesson 14

Create Your Scene - Background

background("white");
var sprite = createSprite(10, 200);
sprite.setAnimation("bowl_1");
var sprite = createSprite(200, 10);
sprite.setAnimation("bandage_1");
function draw() {
  drawSprites();
}

Create Your Scene - Sprites

background("white");
var sprite1 = createSprite(10, 200);
sprite1.setAnimation("bowl_1");
var sprite2 = createSprite(200, 10);
sprite2.setAnimation("bandage_1");

var sprite4 = createSprite(100, 390);
sprite4.setAnimation("arrow_1");

var sprite5 = createSprite(200, 390);
sprite5.setAnimation("axe_gold_1");


function draw() {
  drawSprites();
}

Add a text
background("white");
var sprite1 = createSprite(10, 200);
sprite1.setAnimation("bowl_1");
var sprite2 = createSprite(200, 10);
sprite2.setAnimation("bandage_1");

var sprite4 = createSprite(100, 390);
sprite4.setAnimation("arrow_1");

var sprite5 = createSprite(200, 390);
sprite5.setAnimation("axe_gold_1");
text("Game", 0, 15);


function draw() {
  drawSprites();
}

Scene Movement

background("white");
var sprite1 = createSprite(10, 200);
sprite1.setAnimation("bowl_1");
var sprite2 = createSprite(200, 10);
sprite2.setAnimation("bandage_1");

var sprite4 = createSprite(100, 390);
sprite4.setAnimation("arrow_1");

var sprite5 = createSprite(200, 390);
sprite5.setAnimation("axe_gold_1");
text("Game", 0, 15);


function draw() {
  background("white");
  sprite4.x = sprite4.x + 1
  
  sprite5.y = sprite5.y + -1
  drawSprites();
}


lesson 15: Conditionals

booleans

var finishLine = createSprite(40, 200);
finishLine.setAnimation("finish_line");

var raceCar = createSprite(400, 200);
raceCar.setAnimation("race_car");

function draw() {
  // Draw Background
  background("white");
  
  // Counter pattern to make car move across the screen
  raceCar.x = raceCar.x - 2;
  
  //Program text
  fill("black");
  strokeWeight(5);
  textSize(25);
  text("The race car has crossed the finish line:", 100, 20, 300, 60);
  fill("blue");
  //1) Add blocks to the text command to print the boolean to the screen
  var x =  raceCar.x < 70;
  
  text(x, 100, 100);
  
  
  // Draw Animations
  drawSprites();
}

if Statments

var finishLine = createSprite(40, 200);
finishLine.setAnimation("finish_line");

var raceCar = createSprite(400, 200);
raceCar.setAnimation("race_car");

function draw() {
  // Draw Background
  background("white");
  
  // Update values
  raceCar.x = raceCar.x - 2;
  if (raceCar.x < finishLine.x) {
    text("THE ORANGE CAR IS THE WINNER!",100,100);
  }
  // Draw Animations
  drawSprites();
}


Changing Fruit

var fruit = createSprite(200, 200);
fruit.setAnimation("apple");
fruit.scale = 0.1;

function draw() {
  // Draw Background
  background("white");
  
  // Update Values
  fruit.scale = fruit.scale + 0.01;
  
  if (fruit.scale > 2) {
    fruit.setAnimation("pear");
  }
  
  
  //1) Add a conditional to the draw loop.
  //2) Add code to the conditional statement that asks if the scale of the fruit greater than 2.
  //3) Add code inside the conditional to change the fruit to a pear.




  // Draw Animations
  drawSprites();
}


Droped Soup

var soup =  createSprite(200,200);
soup.setAnimation("stew");

function draw() {
  background("lightgreen");
  soup.rotation = soup.rotation + 3;
  
  //2) Add a conditional that detects when the bowl is upside down.
  //3) Set the sprite's animation to be an empty bowl when the bowl is upside down.
  if(soup.rotation == 180){
    soup.setAnimation("bowl")
  }
  drawSprites();
}


Magic Dinosaur

var backdrop = createSprite(200,200);
backdrop.setAnimation("sci_fi");
var dinosaur = createSprite(200, 350);
dinosaur.scale = 0.2;
dinosaur.setAnimation("tyrannosaurus");

function draw() {
  //move the dinosaur up
  dinosaur.y = dinosaur.y - 5;

  //2) Add a conditional that detects when the dinosaur is in the sky.
  //3) Set the sprite's animation to a pterodactyl when it reaches the sky.
  
  if(dinosaur.y == 150){
    dinosaur.setAnimation("pterodactyl")
  }  //draw everything
  drawSprites();
}



Conditional Challenge A 

var balloon = createSprite(200, 200);
balloon.setAnimation("balloon");
balloon.scale = 0.1;

var pop = createSprite(200,200);
pop.setAnimation("pop");
pop.visible = false;
//1) Create a pop sprite which uses the "pop" visual in the animation tab.


//2) Set the pop sprite to be hidden at the beginning.


function draw() {
  // Draw Background
  background("white");

  // Update Values
  balloon.scale = balloon.scale + 0.001;
  console.log(balloon.scale);
  if(balloon.scale == 0.39700000000000024){
    balloon.visible = false;
    pop.visible = true;
  }

  //3) Add a conditional that checks the size of the balloon to see when it touches the edge of the screen.
  //4) Inside your conditional, set the balloon sprite to be hidden *and* set the pop sprite to appear.



  // Draw Animations
  drawSprites();
}

lesson 16

Prediction - keyDown()

// Run this code and observe what happens
// When you press the space bar

function draw() {
  //Draw Background
  background("white");
  
  // Draw Animations
  textAlign("center", "center");
  textSize(100);
  text(keyDown("space"), 200, 200);
}

Changing Sprites



//1) Run the code and try pressing the "p" and "h" keys.
var sprite = createSprite(200, 200);
sprite.setAnimation("giraffe");

function draw() {
  background("white");

  //2) Look inside the first two conditional statements to see how the code works.
  if(keyDown("h")) {
     sprite.setAnimation("hippo");
  }

  if(keyDown("p")) {
     sprite.setAnimation("pig");
  }

  if(keyDown("r")) {
      //3) Add code to change the sprite to a different animal when the "r" key is pressed.
      sprite.setAnimation("hippo")
  }

  drawSprites();
}



Moving Sprites


var bug = createSprite(200, 200);
bug.setAnimation("ladybug");

function draw() {
  //Draw Background
  background("white");
  //1) Add a conditional statement to check if the right arrow key has been pressed down.

  //2) Add code to move the sprite right if the right arrow is down.
  if(keyDown("LEFT")){
    bug.x = bug.x - 5;
    
  }
  if(keyDown("RIGHT")){
    bug.x = bug.x + 5;
    
  }


  //Draw Animations
  drawSprites();
}

Gears with Conditionals



var blueGear = createSprite(100, 220);
blueGear.setAnimation("blue_gear");

var greenGear = createSprite(183, 298);
greenGear.setAnimation("green_gear");

var redGear = createSprite(185, 145);
redGear.setAnimation("red_gear");

function draw() {
  background("white");
  if(keyDown("space")){
    blueGear.rotation = blueGear.rotation - 1;
  greenGear.rotation = greenGear.rotation + 1;
  redGear.rotation = redGear.rotation + 1;
  }

  //1) Add code that will check if the space key is being pressed down.
  //2) Adjust the program so that the gears only rotate when the space key is pressed down.

  drawSprites();
}

Debug Turtle Movement



var turtle = createSprite(200,200);
turtle.setAnimation("turtle");
turtle.scale = 0.5;

function draw() {
  background("navy");
  if (keyDown("up")) {
    turtle.y = turtle.y - 3;
  }
  if (keyDown("down")) {
    turtle.y = turtle.y + 3;
  }
  if (keyDown("left")) {
    turtle.x = turtle.x - 3;
  }
  if (keyDown("right")) {
    turtle.x = turtle.x + 3;
  }
  drawSprites();
}


Move in all directions

var backdrop = createSprite(200,200);
backdrop.setAnimation("rainbow");
var flyer = createSprite(200,200);
flyer.setAnimation("wing_bot");

function draw() {
  if(keyDown("up")){
    flyer.y = flyer.y - 5;
  }

   if(keyDown("down")){
    flyer.y=flyer.y + 5;
  }

 if(keyDown("left")){
    flyer.x=flyer.x - 5;
  }

 if(keyDown("right")){
    flyer.x=flyer.x + 5;
  }

  //1) Add code to move the sprite left when the left arrow is pressed

  //2) Add code to move the sprite right when the right arrow is pressed

  //3) Add code to move the sprite up when the up arrow is pressed

  //4) Add code to move the sprite down when the down arrow is pressed

drawSprites();
}

Responding to a Single Click



var clicks = 0;

function draw() {
  // 2) Change the code to use the new block, so the program only gives you a point for new clicks.
  if (keyWentDown("space")) {
      clicks = clicks + 1;
  }
  background("white");
  textSize(50);
  text(clicks, 165, 175, 70, 50);
}

If/Else Predict

if space is pressed it increases the scale by 0.02 other wise if any other key is pressed it decreases the scale

Reverse the Gears

var blueGear = createSprite(100, 220);
blueGear.setAnimation("blue_gear");

var greenGear = createSprite(183, 298);
greenGear.setAnimation("green_gear");

var redGear = createSprite(185, 145);
redGear.setAnimation("red_gear");

function draw() {
  background("white");
  
  if (keyDown("space")) {
    blueGear.rotation = blueGear.rotation - 1;
    greenGear.rotation = greenGear.rotation + 1;
    redGear.rotation = redGear.rotation + 1;
  }else{
     blueGear.rotation = blueGear.rotation + 1;
    greenGear.rotation = greenGear.rotation - 1;
    redGear.rotation = redGear.rotation + 1;
  }
  //1) Make the gears spin the opposite way when the space bar is **not** being pressed.
  
  drawSprites();
}

Control the Gears

var blueGear = createSprite(100, 220);
blueGear.setAnimation("blue_gear");

var greenGear = createSprite(183, 298);
greenGear.setAnimation("green_gear");

var redGear = createSprite(185, 145);
redGear.setAnimation("red_gear");

function draw() {
  background("white");
  
  if (mouseDown("leftButton")) {
    blueGear.rotation = blueGear.rotation - 1;
    greenGear.rotation = greenGear.rotation + 1;
    redGear.rotation = redGear.rotation + 1;
  }else{
     blueGear.rotation = blueGear.rotation + 1;
    greenGear.rotation = greenGear.rotation - 1;
    redGear.rotation = redGear.rotation + 1;
  }
  //3) Make the gears spin the opposite way when there is no user input.

  
  drawSprites();
}

Mouse clicks

var balloon = createSprite(200, 50);
balloon.setAnimation("balloon");
balloon.scale = 0.1;

function draw() {
  background("white");
  
  
  if(mouseDown()){
      balloon.y = balloon.y + 1;
  }else{
    balloon.y = balloon.y - 1;
  }

  drawSprites();
}

World.mouseX


var blender = createSprite(100, 300);
blender.setAnimation("blender");
var mixer = createSprite(300, 300);
mixer.setAnimation("mixer");

function draw() {
  background("lightyellow");
  fill("burlywood");
  rect(0, 350, 400, 50);
  if (World.mouseX < 200) {
    blender.x = randomNumber(95, 105);
    blender.y = randomNumber(295, 305);
  }
  if (World.mouseX > 220) {
    mixer.x = randomNumber(250, 252);
    mixer.y = randomNumber(238, 340);
  }
  //2) Add to the conditional so that when the mouse is on the other side of the screen, the mixer shakes instead.

  drawSprites();
}

Emoji Reactions

var emoji = createSprite(200, 200);
emoji.setAnimation("smileEmoji");

function draw() {
  background("white");
  //1)If the mouse is pressed down, change the emoji to a different emoji
  
  if(mouseDown()){
    emoji.setAnimation("glassesEmoji")
  }else{
    emoji.setAnimation("smileEmoji")
  }
  //2)Otherwise, keep the emoji as a smile emoji
  
  drawSprites();
}


Fix The Program

var backdrop = createSprite(200,200);
backdrop.setAnimation("sky");
var creature = createSprite(200,250);
creature.setAnimation("creature");
creature.scale = 0.2;
function draw() {
  //1) Change the code so that the creature only shakes when the mouse is pressed.
  if(mouseDown()){
    creature.rotation = randomNumber(-5,5);
  }
  drawSprites();

  //2) Change the code so the directions ("Press the mouse to shake the creature.") **only show** 
  //when the user is **NOT** pressing the mouse.
  fill("black");
  textSize(40);
  text("Press the mouse to shake the creature.", 20, 50, 360, 100);
}


Mouse X and Y


//Create a bee sprite
var sprite =  createSprite(200,200)
sprite.setAnimation("bee")

function draw(){
  background("white")
  drawSprites();
   sprite.x = World.mouseX;
  sprite.y = World.mouseY;
 
  //Update the position of the bee to the position of the mouse


}

Adding Sprites

var sprite = createSprite(200, 75);
sprite.setAnimation("eightball_1");
sprite.scale = 0.3;
var sprite2 = createSprite(200, 200);
sprite2.setAnimation("soccer_bw_1");
sprite2.scale = 0.3;
var sprite3 = createSprite(200, 320);
sprite3.setAnimation("baseball_1");
sprite3.scale = 0.3;
var clicked = 0;


function draw() {
  drawSprites() 
}

user input 

var sprite = createSprite(200, 75);
sprite.setAnimation("eightball_1");
sprite.scale = 0.3;
var sprite2 = createSprite(200, 200);
sprite2.setAnimation("soccer_bw_1");
sprite2.scale = 0.3;
var sprite3 = createSprite(200, 320);
sprite3.setAnimation("baseball_1");
sprite3.scale = 0.3;

drawSprites();

function draw() {
  if(keyDown("space")){
    sprite.visible = false;
  }else{
    sprite.x = sprite.x + 1;
  }
}


var sprite = createSprite(200, 75);
sprite.setAnimation("eightball_1");
sprite.scale = 0.3;
var sprite2 = createSprite(200, 200);
sprite2.setAnimation("soccer_bw_1");
sprite2.scale = 0.3;
var sprite3 = createSprite(200, 320);
sprite3.setAnimation("baseball_1");
sprite3.scale = 0.3;

drawSprites();

function draw() {
  if(keyDown("space")){
    sprite.visible = false;
  }else{
    sprite.x = sprite.x + 1;
  }
  if(keyDown("right")){
    sprite1.x = sprite1.x - 1;
  }
}


Finishing touches

var sprite = createSprite(200, 75);
sprite.setAnimation("eightball_1");
sprite.scale = 0.3;
var sprite2 = createSprite(200, 200);
sprite2.setAnimation("soccer_bw_1");
sprite2.scale = 0.3;
var sprite3 = createSprite(200, 320);
sprite3.setAnimation("baseball_1");
sprite3.scale = 0.3;


text("Balls Game", 10,10);

drawSprites();

function draw() {
  if(keyDown("space")){
    sprite.visible = false;
  }else{
    sprite.x = sprite.x + 1;
  }
  if(keyDown("right")){
    sprite.x = sprite.x - 1;
  }
}


lesson 19: Velocity

sprite.velocityX = some_velocity
sprite.velocityy = some_velocity


feather example
//1) Find the block that will make the feather sprite go down the screen

var feather = createSprite(200, 50);
feather.setAnimation("feather");
//2) Use that block outside of the draw loop.

feather.velocityY = 2;
//3) Give the block a value to make the feather move down the screen.

function draw() {
  background("skyblue");
  drawSprites();
}


Rotation Speed

sprite.rotationSpeed = SPEED;

var sun = createSprite(200, 200);
sun.setAnimation("sun");
//1) Make the sun rotate by 3 degrees each time it's drawn.
sun.rotationSpeed = 5;

function draw() {
  background("blue");
  drawSprites();
}


example 2

var wheel = createSprite(200, 200);
wheel.setAnimation("wheel");

function draw() {
  background("blue");


  if (keyWentDown("space")) {
    //2) Make the color wheel start spinning when the user presses the space bar.
    wheel.rotationSpeed = wheel.rotationSpeed + 1;

  }

  drawSprites();
}
var fish = createSprite(200, 200);
fish.setAnimation("fishR");
fish.velocityX = 2;

function draw() {
  background("blue");

  if (fish.x < 0) {
    fish.setAnimation("fishR");
    fish.velocityX = 2;
  }
  if (fish.x > 400) {
    fish.setAnimation("fishL");
    fish.velocityX = -2;
  }
  drawSprites();
}

var field = createSprite(200,200);
field.setAnimation("field");
var ball = createSprite(200, 50);
ball.setAnimation("ball");
ball.scale = 0.2;
ball.velocityY = 5;

function draw() {
  //2) Look at how conditionals and velocity are used to make the ball bounce at the bottom of the screen.
  if (ball.y > 380) {
    ball.velocityY = -5;
  }
  if(ball.y < 0){
    ball.velocityY = 5;
  }
  //3) Add code to make the ball bounce at the top of the screen.

  drawSprites();
}

Paint brush
var palatte = createSprite(180, 350);
palatte.setAnimation("paint_pallette");
var brush = createSprite(220, 50);
brush.setAnimation("paint_brush");
 brush.velocityY = 5;
function draw() {
  background("skyblue");
  
  //1) Use a conditional to send the paint brush down if the down arrow is pressed.
 
  if(brush.y > 320){
    brush.velocityY = -5;
  }


  //2) Use a different conditional to send the paint brush up if it reaches the palette.


  drawSprites();
}

Swimming Right and Left

var fish = createSprite(200, 200);
fish.setAnimation("fishR");

function draw() {
  background("blue");
  //2) Use a the correct block inside each conditional statement to make the three following movements:

  //If the user presses the right arrow key, move the fish to the right.
  if (keyWentDown("right")) {
    fish.velocityX = 5;
  }

  //If the fish gets to the right-hand side of the screen, move the fish to the left.
  if (fish.x > 400) {
    fish.velocityX = -5;
  }

  //If the fish gets to the left-hand side of the screen, move the fish to the right.
  if (fish.x < 0) {
    fish.velocityX = 5;
  }
  
  //3) The fish should always be facing the same direction it's moving, so you will also need to
  //update the fish's animation inside each of the conditional statements.

  // Draw the fish.
  drawSprites();
}

Changing Course

var alien = createSprite(50,200);
alien.setAnimation("alien");
alien.velocityX = 0;
alien.velocityY = -3;

function draw() {
  //2) Add the appropriate velocity blocks to each conditional 
  //to make the alien complete the full circuit.

  if (alien.y < 50) {
    alien.velocityX = 5;
    alien.velocityY = 0;
  }
  if (alien.x > 350) {
    alien.velocityX = 0;
    alien.velocityY = 5;
  }
  if (alien.y > 350) {
    alien.velocityX = -5;
    alien.velocityY = 0;
  }
  if (alien.x < 50) {
    alien.velocityX = 0;
    alien.velocityY = -5;
  }
  
  drawSprites();
}

var space = createSprite(200, 200);
space.setAnimation("space");
var flag1 = createSprite(50, 50);
flag1.setAnimation("yellow_flag");
var flag2 = createSprite(350, 50);
flag2.setAnimation("yellow_flag");
var flag3 = createSprite(350, 350);
flag3.setAnimation("yellow_flag");
var flag4 = createSprite(50, 350);
flag4.setAnimation("yellow_flag");
alien.depth=7;


lesson 20

// Create the sprites and start them moving
var backdrop = createSprite(200,200);
backdrop.setAnimation("meadow");
var bunny = createSprite(50, 300);
bunny.setAnimation("bunny");
bunny.velocityX = 3;
var robot = createSprite(400, 320);
robot.setAnimation("robot");
robot.scale = 0.2;
robot.velocityX = -3;
var dinner = createSprite(370, 350);
dinner.setAnimation("stew");
dinner.velocityX = -3;

function draw() {
  // check if the bunny and dinner are touching
  if ((((bunny.x > dinner.x) && ((bunny.x - dinner.x) < (bunny.width/2 + dinner.width/2))) || 
    ((bunny.x < dinner.x) && ((bunny.x - dinner.x) > - (bunny.width/2 + dinner.width/2))))) {
    // stop everything and change to empty bowl
    bunny.velocityX = 0;
    dinner.velocityX = 0;
    robot.velocityX = 0;
    dinner.setAnimation("bowl");
  }
  drawSprites();
}


sprite.isTouching

// Create the sprites and start them moving
var backdrop = createSprite(200,200);
backdrop.setAnimation("meadow");
var bunny = createSprite(50, 300);
bunny.setAnimation("bunny");
bunny.velocityX = 3;
var robot = createSprite(400, 320);
robot.setAnimation("robot");
robot.scale = 0.2;
robot.velocityX = -3;
var dinner = createSprite(370, 350);
dinner.setAnimation("stew");
dinner.velocityX = -3;

function draw() {
  //1) Check if the bunny is touching the dinner.
  if (bunny.isTouching(robot)) {
    // stop everything and change to empty bowl
    bunny.velocityX = 0;
    dinner.velocityX = 0;
    robot.velocityX = 0;
    dinner.setAnimation("bowl");
  }
  drawSprites();
}

apple sauese

// create the sprites
var apple = createSprite(200, -50);
apple.setAnimation("apple");
apple.velocityY = 5;
var blender = createSprite(200, 330);
blender.setAnimation("blender");

function draw() {
  //1) Check if the apple is touching the blender.

  //2) Make the blender shake only when the apple is touching it.
  if(apple.isTouching(blender)){
      blender.x = 200 + randomNumber(-5,5);
  }

  //make the background
  background("skyblue");
  strokeWeight(0);
  fill("sienna");
  rect(0, 340, 400, 60);
  
  drawSprites();
}

Scared Mouse

var kitchen = createSprite(200, 200);
kitchen.setAnimation("kitchen");
var cat = createSprite(350, 125);
cat.setAnimation("cat");
cat.scale = 0.50;
var mouse = createSprite(0, 175);
mouse.setAnimation("mouse_right");
mouse.velocityX = 4;


function draw() {
  
  if(mouse.isTouching(cat)){
    cat.setAnimation("cat_meow");
    mouse.setAnimation("mouse_left");
    mouse.velocityX = -5;
  }
  //1) Program the mouse to run the other way 
  // and the cat to look down and meow if the mouse is touching the cat


  drawSprites();
}

Rainbow Horse

// create the sprites
var horse = createSprite(200, 150);
horse.setAnimation("horse");
var rainbow = createSprite(400, 370);
rainbow.setAnimation("rainbow");
rainbow.velocityX = -5;
rainbow.velocityY = -5;
rainbow.rotateToDirection = true;

function draw() {
  // draw the background
  background("skyblue");
  
  if(horse.isTouching(rainbow)){
    horse.setAnimation("unicorn");
  }

  //1) Change the horse into a unicorn when the rainbow touches it.


  
  drawSprites();
}

debug add point on collision

//1) Read and run the code to understand how it works, and what is going wrong.
var points = 0;
var coin = createSprite(200, 100);
coin.setAnimation("coin");
var ghost = createSprite(200, 300);
ghost.setAnimation("ghost");

function draw() {
  //2) Identify the code that increases the score.
  if (ghost.isTouching(coin)) {
    points = points + 1;
    coin.x = randomNumber(10,300);
    coin.y = randomNumber(10,300);
    //3) Add a line of code so that at least one sprite moves to a new location.

  }
  background("lightblue");
  text("Points: " + points, 25, 25);
  if(keyDown("up")) {
    ghost.y = ghost.y - 5;
  }
  if(keyDown("down")) {
    ghost.y = ghost.y + 5;
  }
  if(keyDown("left")) {
    ghost.x = ghost.x - 5;
  }
  if(keyDown("right")) {
    ghost.x = ghost.x + 5;
  }
  drawSprites();
}


Lesson 21 : Side Scroller

//GAME SETUP
// Create the sprites
// set velocity for the obstacle and the target
var frog = createSprite(220,360);
frog.setAnimation("frog");

var fly = createSprite(380,250);
fly.setAnimation("fly");
fly.velocityX=-5;

var mushroom = createSprite(380,360);
mushroom.setAnimation("mushroom");

mushroom.velocityX=-5;
//create the variables
var score = 0;
var health = 100;

function draw() {
  // BACKGROUND
  background("white");
  
  if(mushroom.x < 0){
    mushroom.x = 400;
     mushroom.rotation = 0;
  }
  
  if(keyDown("up")){
    frog.velocityY = -8;
  }
  
  if(frog.y == 200){
    frog.y = 360;
    frog.velocityY = 0;
  }
  if(fly.x < 0){
    fly.x = 400;
    fly.y = randomNumber(250,350);
  }
  
  if(mushroom.isTouching(frog)){
    mushroom.rotation = 20;
    health = health - 10;
    mushroom.x = 400;
  }
  
  if(frog.isTouching(fly)){
    score = score + 10;
    fly.x = 400;
  }
  

  drawSprites();
  
  // SCOREBOARD
  // add scoreboard and health meter
  fill("black");
  textSize(20);
  text("Health:", 280, 30);
  text (health, 350, 30);
  
  fill("black");
  textSize(20);
  text("Score:", 280, 60);
  text (score, 350, 60);
  
  // GAME OVER
  // if health runs out
  // show Game over
  if (health < 0) {
    background("black");
    fill("green");
    textSize(50);
    text("Game Over!" , 40, 200);
  }
}

lesson 22

Velocity and the Counter Pattern

var car = createSprite(50, 200);
car.setAnimation("red_car");
car.velocityX = 0.2;

function draw() {
  background("gray");
  
  //1) Add code to make the car speed up.

 car.velocityX = car.velocityX + 0.5;
  
  drawSprites();
}

Falling rock

var rock = createSprite(200, 50);
rock.setAnimation("rock");
rock.velocityY = 0.5;

function draw() {
  background("skyblue");
  rock.velocityY = rock.velocityY + 0.1;
  
  //1) Add code to make the rock speed up as it falls.
  
  drawSprites();
}

Slowing Things down

var car = createSprite(50, 200);
car.setAnimation("blue_car");
car.velocityX =  10;

noStroke();

function draw() {
  background("burlywood");
  fill("blue");
  rect(350,0,100,400);
  car.velocityX = car.velocityX - 0.2;
  
  //1) Add code to slow the car down before it goes into the water.


  drawSprites();
}

Slow down and reverse

var scenery = createSprite(200, 200);
scenery.setAnimation("park_view");
var cat = createSprite(50, 250);
cat.setAnimation("brown_cat");
cat.scale = 0.5;

var mouse = createSprite(375, 325);
mouse.setAnimation("mouse");
//1) Take a look at the code that makes the mouse move.
mouse.velocityX = -20;


function draw() {
  //2) Add code to make the mouse change directions when it reaches the cat.
  if(mouse.x < 100){
    
    mouse.velocityX = mouse.velocityX + 50;
  }

  drawSprites();
}

Looks like Gravity

var rock = createSprite(200, 350);
rock.setAnimation("rock");
rock.velocityY =  -10;
rock.rotationSpeed = 2;

function draw() {
  background("skyblue");
  
  if(rock.y < 100){
    rock.velocityY = rock.velocityY + 11
  }
  
  //1) Add code to make the rock slow down and then fall.

  
  drawSprites();
}

jumping

  if(alien.y < 100){
    alien.velocityY = 25;
  }

Lesson 23

Program a Sprite Interaction

// Create giraffe sprite
var giraffe = createSprite(30,200);
giraffe.setAnimation("giraffe");
giraffe.velocityX = 1;
giraffe.scale = 0.3;

// Create monkey sprite
var monkey = createSprite(300,200);
monkey.setAnimation("monkey");
monkey.scale = 0.3;

function draw(){
  // Draw background
  background("white");
  
  //1) Program the giraffe to push the monkey off the screen.
  
  if(giraffe.isTouching(monkey)){
    monkey.velocityX = 1;
  }

  
  drawSprites();
}


Immersive Reader
Write Your Own Sprite Interaction


// Create elephant sprite
var elephant = createSprite(200, 400);
elephant.setAnimation("elephant");
elephant.scale = 0.5;
elephant.velocityY = randomNumber(-3,-1);

// Create hippo sprite
var hippo = createSprite(200,100);
hippo.setAnimation("hippo");
hippo.scale = 0.5;

function draw(){
  // Draw background
  background("white");
  if(elephant.isTouching(hippo)){
    hippo.velocityY = randomNumber(-3,-1);
  }
  
  //2) Add code to make the elephant push the hippo off the screen.

  
  drawSprites();
}


Displace

// Create elephant sprite
var elephant = createSprite(200, 350);
elephant.setAnimation("elephant");
elephant.scale = 0.5;
elephant.velocityY = randomNumber(-3,-1);

// Create hippo sprite
var hippo = createSprite(200,50);
hippo.setAnimation("hippo");
hippo.scale = 0.5;
hippo.velocityY = randomNumber(1,3);

function draw(){
  // Draw background
  background("white");
  
  //2) Take a look at the new block and how it is being used.
  //3) Fix the block so that the elephant is pushing the hippo.
  elephant.displace(hippo);
  
  drawSprites();
}

Collision types

var arrow = createSprite(0, 200);
arrow.setAnimation("arrow");
arrow.rotation=45;
arrow.velocityX = 3;

var apple = createSprite(300, 200);
apple.setAnimation("apple");

function draw() {
  //1) Choose the best block to make the arrow stop when it reaches the apple.
  if(arrow.collide(apple)){
    arrow.velocityX = 0;
  }
  
  background("lightBlue");
  drawSprites();
}

Sprite interactions

// create sprites
var giraffe = createSprite(50, 50);
giraffe.setAnimation("giraffe");
giraffe.velocityX = 3;
var hippo = createSprite(50, 150);
hippo.setAnimation("hippo");
hippo.velocityX = 3;
var rabbit = createSprite(50, 250);
rabbit.setAnimation("rabbit");
rabbit.velocityX = 3;
var snake = createSprite(50, 350);
snake.setAnimation("snake");
snake.velocityX = 3;
var parrot = createSprite(350, 50);
parrot.setAnimation("parrot");
parrot.velocityX = -3;
var elephant = createSprite(350, 150);
elephant.setAnimation("elephant");
elephant.velocityX = -3;
var monkey = createSprite(350, 250);
monkey.setAnimation("monkey");
monkey.velocityX = -3;
var pig = createSprite(350, 350);
pig.setAnimation("pig");
pig.velocityX = -3;


function draw() {
  background("lightblue");
  
  giraffe.displace(parrot);
  hippo.displace(elephant);
  monkey.displace(rabbit);

    snake.bounceOff(pig);

  //1) For each pair of animals, choose the sprite interaction 
  // that matches the target image.


  drawSprites();
}
Debug


// Create Gold Coin
var goldCoin = createSprite(51,50);
goldCoin.setAnimation("gold_coin");
goldCoin.velocityX = 2;
goldCoin.velocityY = 2;

// Create Silver Coin
var silverCoin = createSprite(350,350);
silverCoin.setAnimation("silver_coin");
silverCoin.velocityX = -2;
silverCoin.velocityY = -2;
silverCoin.debug = false;

function draw() {
  background("darkgreen");

  // Sprite Interactions
  goldCoin.bounce(silverCoin);
  
  drawSprites();
}

lesson 24


Create Sprite
// GAME SETUP
// create player, target, and obstacles
var player = createSprite(200, 100);
player.setAnimation("fly_bot");
player.scale = 0.8;

var coin = createSprite(randomNumber(0,350), randomNumber(0,350));
coin.setAnimation("coin");

var rock1 = createSprite(0, randomNumber(100,300));
rock1.setAnimation("rock");

rock1.velocityX = 8;

var rock2 = createSprite(randomNumber(100,300), 0);
rock2.setAnimation("rock");

rock2.velocityY = 8;


function draw() {
  background("lightblue");
  
  // FALLING
  player.velocityY = 10;
  
  // LOOPING
  
  
  // PLAYER CONTROLS
  // change the y velocity when the user clicks "up"
  
  // decrease the x velocity when user clicks "left"
  
  // increase the x velocity when the user clicks "right"
  
  // SPRITE INTERACTIONS
  // reset the coin when the player touches it
  
  // make the obstacles push the player
  
  
  // DRAW SPRITES
  drawSprites();
  
  // GAME OVER
  if (player.x < -50 || player.x > 450 || player.y < -50 || player.y > 450) {
    background("black");
    textSize(50);
    fill("green");
    text("Game Over!", 50, 200);
  }
  
}


final 
// GAME SETUP
// create player, target, and obstacles
var player = createSprite(200, 100);
player.setAnimation("fly_bot");
player.scale = 0.8;

var coin = createSprite(randomNumber(0,350), randomNumber(0,350));
coin.setAnimation("coin");

var rock1 = createSprite(0, randomNumber(100,300));
rock1.setAnimation("rock");

rock1.velocityX = 8; // Moving to the right

var rock2 = createSprite(randomNumber(100,300), 0);
rock2.setAnimation("rock");

rock2.velocityY = 8; // Moving downward

// gravity
var gravity = 0.5;
var jumpStrength = -10;

// velocity control for floating left and right
var floatSpeed = 2; // Speed at which the player floats left and right

function draw() {
  background("lightblue");
  
  // PLAYER FALLING
  player.velocityY += gravity;  // Apply gravity
  
  // PLAYER CONTROLS
  // Jump when the user presses the "up" arrow
  if (keyDown("up") && player.y > 50) {  // Prevent jumping if the player is too close to the top
    player.velocityY = jumpStrength;  // Set velocityY to negative to jump
  }
  
  // Move left when the "left" arrow is pressed
  if (keyDown("left")) {
    player.velocityX = -floatSpeed;  // Decrease the x velocity to move left
  }
  
  // Move right when the "right" arrow is pressed
  if (keyDown("right")) {
    player.velocityX = floatSpeed;  // Increase the x velocity to move right
  }
  
  // Reset the player's velocityX to 0 when no key is pressed
  if (!keyDown("left") && !keyDown("right")) {
    player.velocityX = 0;
  }
  
  // SPRITE INTERACTIONS
  // Reset the coin when the player touches it
  if (player.isTouching(coin)) {
    coin.x = randomNumber(0, 350);
    coin.y = randomNumber(0, 350);
  }
  
  // Make the obstacles push the player across the screen
  if (player.isTouching(rock1)) {
    if (rock1.velocityX > 0) {
      player.velocityX = 5;  // Push the player to the right
    } else {
      player.velocityX = -5; // Push the player to the left
    }
  }

  if (player.isTouching(rock2)) {
    if (rock2.velocityY > 0) {
      player.velocityY = 5;  // Push the player down
    } else {
      player.velocityY = -5; // Push the player up
    }
  }

  // LOOPING
  // Reset rock1 when it reaches the right edge, and send it back to a random position from the left
  if (rock1.x > 400) {
    rock1.x = 0;  // Start from the left edge
    rock1.y = randomNumber(50, 350);  // Random vertical position between 50 and 350
  }
  
  // Reset rock2 when it reaches the bottom edge, and send it back to a random position from the top
  if (rock2.y > 400) {
    rock2.y = 0;  // Start from the top edge
    rock2.x = randomNumber(50, 350);  // Random horizontal position between 50 and 350
  }
  
  // Draw the sprites
  drawSprites();
  
  // GAME OVER
  if (player.x < -50 || player.x > 450 || player.y < -50 || player.y > 450) {
    background("black");
    textSize(50);
    fill("green");
    text("Game Over!", 50, 200);
  }
}

lesson 25 : functions

drawSky();
// 1) Call the drawBalloons function to reveal the full image.
drawBalloons();  // <-- This is the line you're adding

// Function to draw the sky with a sun
function drawSky(){
  noStroke();
  background(rgb(0,200,255));  // Set the sky color
  fill("yellow");
  ellipse(350, 50, 50, 50);  // Draw the sun
}

// Function to draw the balloons
function drawBalloons(){
  stroke("black");
  line(100, 100, 140, 450);   // Draw string for the first balloon
  noStroke();
  fill("red");
  ellipse(100, 100, 50, 50);  // Draw the first red balloon

  stroke("black");
  line(120, 120, 140, 450);   // Draw string for the second balloon
  noStroke();
  fill("orange");
  ellipse(120, 120, 50, 50);  // Draw the second orange balloon

  stroke("black");
  line(140, 80, 140, 450);    // Draw string for the third balloon
  noStroke();
  fill("yellow");
  ellipse(140, 80, 50, 50);   // Draw the third yellow balloon

  stroke("black");
  line(160, 90, 140, 450);    // Draw string for the fourth balloon
  noStroke();
  fill("red");
  ellipse(160, 90, 50, 50);   // Draw the fourth red balloon
}


//1) Read the 4 functions to understand what each one does.
//2) Call the functions in an order that draws the scene in the way that looks best to you.



function drawBackground(){
  noStroke();
  background(rgb(0,200,255));
  fill("green");
  rect(0,380,400,20);
}

function drawTrees(){
  noStroke();
  //Draw All Trunks
  fill(rgb(150,100,0));
  rect(210,330,30,50);
  rect(290,330,30,50);
  rect(360,330,30,50);
  //Draw All Branches
  fill("green");
  regularPolygon(225,280,3,100);
  regularPolygon(305,280,3,110);
  regularPolygon(375,290,3,95);
}

function drawClouds(){
  noStroke();
  fill(rgb(255,255,255,100));
  ellipse(300,200,200,50);
  ellipse(320,200,200,70);
  ellipse(340,200,200,50);
  
  ellipse(100,100,200,50);
  ellipse(120,100,200,70);
  ellipse(140,100,200,50);  
}

function drawFence(){
  stroke("white");
  strokeWeight(5);
  line(0,360,400,360);
  line(20,350,20,380);
  line(50,350,50,380);
  line(80,350,80,380);
  line(110,350,110,380);
  line(140,350,140,380);
  line(170,350,170,380);
  line(200,350,200,380);
  line(230,350,230,380);
  line(260,350,260,380);
  line(290,350,290,380);
  line(320,350,320,380);
  line(350,350,350,380);
  line(380,350,380,380);
}


drawBackground();   
drawClouds();       
drawTrees();        
drawFence();        


Calling functions on the draw loop

// Create sprite for flyman
var flyman = createSprite(400, 200);
flyman.velocityX = -1;
flyman.setAnimation("flyMan_fly");

function draw(){
  // Call the treesBackground function to draw the background
  treesBackground();  // Draw the background
  
  drawSprites();  // Draw all sprites (like the flyman)
}

// Function to draw the background with trees and the sun
function treesBackground(){
  noStroke();
  background(rgb(0,200,255));  // Set the sky color
  
  fill("green");
  rect(0, 380, 400, 20);  // Draw the ground
  
  fill("yellow");
  ellipse(350, 50, 20, 20);  // Draw the sun
  
  strokeWeight(20);
  stroke(rgb(150, 100, 0));  // Set tree trunk color
  
  // Draw tree trunks
  line(20, 300, 20, 380);
  line(80, 300, 80, 380);
  line(120, 300, 120, 380);
  line(160, 300, 160, 380);
  line(200, 300, 200, 380);
  line(250, 300, 250, 380);
  
  fill("green");
  noStroke();
  
  // Draw tree canopies (circles)
  ellipse(20, 300, 100, 100);
  ellipse(80, 300, 110, 110);
  ellipse(120, 300, 95, 95);
  ellipse(160, 300, 110, 110);
  ellipse(200, 300, 100, 100);
  ellipse(250, 300, 100, 100);
}

Write Your Own Function


var coin = createSprite(200, 10);
coin.setAnimation("coin_gold_1");
setCoin();  // Call the setCoin function to set the initial position and velocity

var bunny = createSprite(200, 350);
bunny.setAnimation("bunny1_ready_1");

var score = 0;

function draw() {
  background("white");
  
  // Move bunny left or right
  if(keyDown("left")){
    bunny.x = bunny.x - 2;
  }
  
  if(keyDown("right")){
    bunny.x = bunny.x + 2;
  }
  
  // If the coin reaches the bottom of the screen, reset its position
  if(coin.y > 400){
    setCoin();
    score++;  // Increment score when coin falls
  }
  
  // Display score
  textSize(20);
  text("Score: " + score, 10, 10);
  
  // Draw all sprites
  drawSprites();
}

// Function to set the coin's position and velocity
function setCoin(){
  // Set the coin's y position to the top of the screen
  coin.y = 10;
  
  // Randomize the coin's x position within the screen width
  coin.x = random(50, 350);
  
  // Set the coin's velocity to move down (fall)
  coin.velocityY = 5;  // Adjust this value for the falling speed
}

Change the backfround with the score

var coin = createSprite(200, 10);
coin.setAnimation("coin_gold_1");
setCoin();

var bunny = createSprite(200, 350);
bunny.setAnimation("bunny1_ready_1");

var score = 0;

function draw() {
  // Check if score is 10 or more
  if (score >= 10) {
    drawCelebrationBackground();  // Fun background for when score reaches 10
  } else {
    drawRegularBackground();  // Regular background for normal gameplay
  }
  
  // Move bunny left or right
  if(keyDown("left")){
    bunny.x = bunny.x - 2;
  }
  
  if(keyDown("right")){
    bunny.x = bunny.x + 2;
  }
  
  // If the coin reaches the bottom of the screen, reset its position
  if(coin.y > 400){
    setCoin();
    score++;  // Increment score when coin falls
  }
  
  // Display score
  textSize(20);
  text("Score: " + score, 10, 10);
  
  // Draw all sprites
  drawSprites();
}

// Function to set the coin's position and velocity
function setCoin(){
  // Set the coin's y position to the top of the screen
  coin.y = 10;
  
  // Randomize the coin's x position within the screen width
  coin.x = random(50, 350);
  
  // Set the coin's velocity to move down (fall)
  coin.velocityY = 5;
}

// Function to draw the regular background
function drawRegularBackground() {
  noStroke();
  background("white");  // Set a plain white background
  
  // Draw the ground
  fill("green");
  rect(0, 380, 400, 20);
  
  // Draw the sun
  fill("yellow");
  ellipse(350, 50, 20, 20);
  
  // Draw trees (same as before)
  strokeWeight(20);
  stroke(rgb(150, 100, 0));
  line(20, 300, 20, 380);
  line(80, 300, 80, 380);
  line(120, 300, 120, 380);
  line(160, 300, 160, 380);
  line(200, 300, 200, 380);
  line(250, 300, 250, 380);
  
  fill("green");
  noStroke();
  ellipse(20, 300, 100, 100);
  ellipse(80, 300, 110, 110);
  ellipse(120, 300, 95, 95);
  ellipse(160, 300, 110, 110);
  ellipse(200, 300, 100, 100);
  ellipse(250, 300, 100, 100);
}

// Function to draw the celebration background after 10 coins
function drawCelebrationBackground() {
  // Bright and fun background colors
  background(rgb(255, 223, 186));  // Light yellow-orange background
  
  // Confetti (colored circles falling from the top)
  fill("purple");
  ellipse(random(0, 400), random(0, 200), 20, 20);
  fill("blue");
  ellipse(random(0, 400), random(0, 200), 20, 20);
  fill("pink");
  ellipse(random(0, 400), random(0, 200), 20, 20);
  fill("green");
  ellipse(random(0, 400), random(0, 200), 20, 20);
  fill("red");
  ellipse(random(0, 400), random(0, 200), 20, 20);

  // Draw a "Congrats" message
  textSize(40);
  textAlign(CENTER);
  fill("black");
  text("Congrats!", 200, 150);

  // Optional: Draw some balloons (fun touch)
  drawBalloon(100, 100, "red");
  drawBalloon(250, 100, "blue");
  drawBalloon(350, 100, "green");
}

// Function to draw balloons (as part of the celebration background)
function drawBalloon(x, y, color) {
  fill(color);
  ellipse(x, y, 50, 80);  // Draw the balloon
  
  // Draw the string for the balloon
  stroke("black");
  line(x, y + 40, x, y + 100);
  noStroke();
}

game 2 paddle

var ball = createSprite(200, 200);
ball.setAnimation("ball");
ball.scale = 0.10;
ball.velocityY = 5;
ball.velocityX = 10;

var paddle = createSprite(200, 380);
paddle.setAnimation("paddle");
paddle.width = 200;

var brick1 = createSprite(100, 150);
brick1.setAnimation("brick");

var brick2 = createSprite(300, 75);
brick2.setAnimation("brick");

var star = createSprite(54, 95);
star.setAnimation("redstar");

var star2 = createSprite(302, 25);
star2.setAnimation("redstar");

// Creates an invisible sprite around the edges to detect collisions
createEdgeSprites();

var score = 0;

function draw() {
  background("lightblue");

  // Call the functions to update game elements
  movePaddle();
  ballBounce();
  collectStars();
  
  // Display the score
  textSize(20);
  text("Score: " + score, 10, 10);
  
  // Draw all sprites
  drawSprites();
}

// Function to move the paddle based on key inputs
function movePaddle() {
  if (keyDown("left")) {
    paddle.x -= 10;  // Move left
  }
  
  if (keyDown("right")) {
    paddle.x += 10;  // Move right
  }
  
  // Prevent the paddle from going off-screen
  if (paddle.x < 50) {
    paddle.x = 50;
  }
  
  if (paddle.x > 350) {
    paddle.x = 350;
  }
}

// Function to make the ball bounce off walls, the paddle, and bricks
function ballBounce() {
  // Bounce off the top wall
  if (ball.y < 0) {
    ball.velocityY = -ball.velocityY;
  }

  // Bounce off the side walls
  if (ball.x < 0 || ball.x > 400) {
    ball.velocityX = -ball.velocityX;
  }

  // Bounce off the paddle
  if (ball.isTouching(paddle)) {
    ball.velocityY = -ball.velocityY;
  }

  // Bounce off bricks
  if (ball.isTouching(brick1)) {
    ball.velocityY = -ball.velocityY;
    brick1.remove();  // Remove brick when hit by the ball
  }
  
  if (ball.isTouching(brick2)) {
    ball.velocityY = -ball.velocityY;
    brick2.remove();  // Remove brick when hit by the ball
  }
}

// Function to detect when the ball collects stars and update score
function collectStars() {
  if (ball.isTouching(star)) {
    star.remove();  // Remove star from the game
    setScore();     // Update score
  }

  if (ball.isTouching(star2)) {
    star2.remove();  // Remove second star
    setScore();      // Update score
  }
}

// Bonus Function: Set the score whenever a star is collected
function setScore() {
  score += 10;  // Increase the score by 10 for each star collected
}


lesson 26: Game Design


var score = 0;
var playerSpeed = 5;
var enemiesAtCake = 0; // Track how many enemies reached the cake

var cake = createSprite(350, 200);
cake.setAnimation("cake");

var player = createSprite(200, 200);
player.setAnimation("player");

var enemy1 = createSprite(0, random(160, 250));
enemy1.setAnimation("enemy");

var enemy2 = createSprite(0, random(160, 250));
enemy2.setAnimation("enemy");

var enemy3 = createSprite(0, random(160, 250)); // Adding a third enemy
enemy3.setAnimation("enemy");

function draw() {
  if (enemiesAtCake >= 3) {
    // End the game if 3 enemies have reached the cake
    displayEndGame();
    return; // Stop drawing the game
  }

  gameBackground();
  movePlayer();
  moveEnemies();
  checkPlayerPushes();
  resetEnemies();
  showScore();
  drawSprites();
}

function gameBackground() {
  noStroke();
  background(rgb(0, 100, 255));
  fill(rgb(100, 100, 100));
  rect(0, 150, 400, 100);
  fill(rgb(80, 80, 80));
  rect(0, 140, 400, 10);
  rect(0, 250, 400, 10);
}

function movePlayer() {
  if (keyDown("left")) {
    player.x -= playerSpeed;
  }
  if (keyDown("right")) {
    player.x += playerSpeed;
  }
  if (keyDown("up")) {
    player.y -= playerSpeed;
  }
  if (keyDown("down")) {
    player.y += playerSpeed;
  }
  player.x = constrain(player.x, 0, 400);
  player.y = constrain(player.y, 0, 300);
}

function moveEnemies() {
  enemy1.x += 2;
  enemy2.x += 2;
  enemy3.x += 2; // Move the third enemy
}

function checkPlayerPushes() {
  if (player.isTouching(enemy1)) {
    enemy1.y += 5; // Player pushes enemy1
  }
  if (player.isTouching(enemy2)) {
    enemy2.y += 5; // Player pushes enemy2
  }
  if (player.isTouching(enemy3)) {
    enemy3.y += 5; // Player pushes enemy3
  }
}

function resetEnemies() {
  if (enemy1.x > 400) {
    enemy1.x = 0;
    enemy1.y = random(164, 250);
    score += 1;
  }
  if (enemy2.x > 400) {
    enemy2.x = 0;
    enemy2.y = random(160, 250);
    score += 1;
  }
  if (enemy3.x > 400) {
    enemy3.x = 0;
    enemy3.y = random(160, 250);
    score += 1;
  }

  if (enemy1.x > cake.x - 10 && enemy1.x < cake.x + 10 && enemy1.y > cake.y - 10 && enemy1.y < cake.y + 10) {
    enemy1.x = 0;
    enemy1.y = random(164, 250);
    score -= 1;
    enemiesAtCake += 1; // Enemy 1 reached the cake
  }

  if (enemy2.x > cake.x - 10 && enemy2.x < cake.x + 10 && enemy2.y > cake.y - 10 && enemy2.y < cake.y + 10) {
    enemy2.x = 0;
    enemy2.y = random(164, 250);
    score -= 1;
    enemiesAtCake += 1; // Enemy 2 reached the cake
  }

  if (enemy3.x > cake.x - 10 && enemy3.x < cake.x + 10 && enemy3.y > cake.y - 10 && enemy3.y < cake.y + 10) {
    enemy3.x = 0;
    enemy3.y = random(164, 250);
    score -= 1;
    enemiesAtCake += 1; // Enemy 3 reached the cake
  }
}

function displayEndGame() {
  background(rgb(0, 100, 255)); // Set background to show game over screen
  fill("white");
  textSize(30);
  textAlign(CENTER);
  text("Game Over!", 200, 150);
  textSize(20);
  text("Final Score: " + score, 200, 200);
}

function showScore() {
  fill("white");
  textSize(20);
  text("Score: " + score, 20, 20);
}

lesson 27


var score = 0;
var lives = 3; // Initialize lives
var platform, platform2, item, item2, player;

platform = createSprite(200, 400);
platform.setAnimation("platform");
platform.velocityY = 2;

platform2 = createSprite(350, 200);
platform2.setAnimation("platform");
platform2.velocityY = 2;

item = createSprite(randomNumber(50, 350), randomNumber(-30, -60));
item.setAnimation("star");
item.velocityY = 3;

item2 = createSprite(randomNumber(50, 350), randomNumber(-30, -60));
item2.setAnimation("star");
item2.velocityY = 3;

player = createSprite(200, 0);
player.setAnimation("alien");
player.velocityY = 0.2;

function draw() {
  if (lives <= 0) {
    gameOver(); // End the game if lives are 0
  } else {
    if (score > 10) {
      background2();
    } else {
      background1();
    }

    showScore();
    showLives(); // Show lives on the screen
    loopPlatforms();
    loopItems();
    playerFall();
    controlPlayer();
    playerLands();
    collectItems();
    checkFall(); // Check if the player falls off the screen

    drawSprites();
  }
}

function background1() {
  background("darkBlue");
  noStroke();
  fill("yellow");
  ellipse(randomNumber(0, 400), randomNumber(0, 400), 3, 3);
  ellipse(randomNumber(0, 400), randomNumber(0, 400), 3, 3);
  ellipse(340, 50, 60, 60);
  fill("darkBlue");
  ellipse(320, 30, 60, 60);
}

function background2() {
  background("lightBlue");
  fill("pink");
  ellipse(200, 200, 60, 60);
}

function showScore() {
  fill("white");
  textSize(20);
  text("Score: " + score, 10, 20);
}

function showLives() {
  fill("white");
  textSize(20);
  text("Lives: " + lives, 10, 40); // Display lives
}

function loopPlatforms() {
  if (platform.y > 400) {
    platform.y = 0;
    platform.x = randomNumber(50, 350);
  }

  if (platform2.y > 400) {
    platform2.y = 0;
    platform2.x = randomNumber(50, 350);
  }
}

function loopItems() {
  if (item.y > 400) {
    item.y = randomNumber(-30, -60);
    item.x = randomNumber(50, 350);
  }

  if (item2.y > 400) {
    item2.y = randomNumber(-30, -60);
    item2.x = randomNumber(50, 350);
  }
}

function playerFall() {
  player.velocityY += 0.5;
}

function controlPlayer() {
  if (keyDown("left")) {
    player.x -= 5;
  }

  if (keyDown("right")) {
    player.x += 5;
  }

  if (keyDown("up") && player.velocityY === 0) {
    player.velocityY = -10;
  }
}

function playerLands() {
  if (player.isTouching(platform) || player.isTouching(platform2)) {
    player.velocityY = 0;

    if (keyDown("up")) {
      player.velocityY = -10;
    }
  }
}

function collectItems() {
  if (player.isTouching(item)) {
    item.y = randomNumber(-30, -60);
    item.x = randomNumber(50, 350);
    score += 1;
  }

  if (player.isTouching(item2)) {
    item2.y = randomNumber(-30, -60);
    item2.x = randomNumber(50, 350);
    score += 1;
  }
}

// Check if player falls off the screen
function checkFall() {
  if (player.y > 420) { // Player has fallen off the screen
    lives -= 1; // Subtract one life
    if (lives > 0) {
      player.y = 0; // Reset the player position to the top
      player.x = randomNumber(50, 350); // Randomize the x position
      player.velocityY = 0.2; // Make the player fall slowly again
    } else {
      gameOver(); // End game when lives reach 0
    }
  }
}

function gameOver() {
  background("red");
  fill("white");
  textSize(50);
  text("Game Over", 100, 200);
  noLoop(); // Stop the game loop
}

lesson 28


var score = 0;
var lives = 3; // Initialize lives
var platform, platform2, item, item2, player;

platform = createSprite(200, 400);
platform.setAnimation("platform");
platform.velocityY = 2;

platform2 = createSprite(350, 200);
platform2.setAnimation("platform");
platform2.velocityY = 2;

item = createSprite(randomNumber(50, 350), randomNumber(-30, -60));
item.setAnimation("star");
item.velocityY = 3;

item2 = createSprite(randomNumber(50, 350), randomNumber(-30, -60));
item2.setAnimation("star");
item2.velocityY = 3;

player = createSprite(200, 0);
player.setAnimation("alien");
player.velocityY = 0.2;

function draw() {
  if (lives <= 0) {
    gameOver(); // End the game if lives are 0
  } else {
    if (score > 10) {
      background2();
    } else {
      background1();
    }

    showScore();
    showLives(); // Show lives on the screen
    loopPlatforms();
    loopItems();
    playerFall();
    controlPlayer();
    playerLands();
    collectItems();
    checkFall(); // Check if the player falls off the screen

    drawSprites();
  }
}

function background1() {
  background("darkBlue");
  noStroke();
  fill("yellow");
  ellipse(randomNumber(0, 400), randomNumber(0, 400), 3, 3);
  ellipse(randomNumber(0, 400), randomNumber(0, 400), 3, 3);
  ellipse(340, 50, 60, 60);
  fill("darkBlue");
  ellipse(320, 30, 60, 60);
}

function background2() {
  background("lightBlue");
  fill("pink");
  ellipse(200, 200, 60, 60);
}

function showScore() {
  fill("white");
  textSize(20);
  text("Score: " + score, 10, 20);
}

function showLives() {
  fill("white");
  textSize(20);
  text("Lives: " + lives, 10, 40); // Display lives
}

function loopPlatforms() {
  if (platform.y > 400) {
    platform.y = 0;
    platform.x = randomNumber(50, 350);
  }

  if (platform2.y > 400) {
    platform2.y = 0;
    platform2.x = randomNumber(50, 350);
  }
}

function loopItems() {
  if (item.y > 400) {
    item.y = randomNumber(-30, -60);
    item.x = randomNumber(50, 350);
  }

  if (item2.y > 400) {
    item2.y = randomNumber(-30, -60);
    item2.x = randomNumber(50, 350);
  }
}

function playerFall() {
  player.velocityY += 0.5;
}

function controlPlayer() {
  if (keyDown("left")) {
    player.x -= 5;
  }

  if (keyDown("right")) {
    player.x += 5;
  }

  if (keyDown("up") && player.velocityY === 0) {
    player.velocityY = -10;
  }
}

function playerLands() {
  if (player.isTouching(platform) || player.isTouching(platform2)) {
    player.velocityY = 0;

    if (keyDown("up")) {
      player.velocityY = -10;
    }
  }
}

function collectItems() {
  if (player.isTouching(item)) {
    item.y = randomNumber(-30, -60);
    item.x = randomNumber(50, 350);
    score += 1;
  }

  if (player.isTouching(item2)) {
    item2.y = randomNumber(-30, -60);
    item2.x = randomNumber(50, 350);
    score += 1;
  }
}

// Check if player falls off the screen
function checkFall() {
  if (player.y > 420) { // Player has fallen off the screen
    lives -= 1; // Subtract one life
    if (lives > 0) {
      player.y = 0; // Reset the player position to the top
      player.x = randomNumber(50, 350); // Randomize the x position
      player.velocityY = 0.2; // Make the player fall slowly again
    } else {
      gameOver(); // End game when lives reach 0
    }
  }
}

function gameOver() {
  background("red");
  fill("white");
  textSize(50);
  text("Game Over", 100, 200);
  noLoop(); // Stop the game loop
}