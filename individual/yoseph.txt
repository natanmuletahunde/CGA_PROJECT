#lesson 1 :programming for purpose
#In this lesson 1  i have covered some interactive animation and game rapid survey and 
 some game design templates
#in this lesson 2 i have explored tool that lets me draw different colored shapes.
# lesson 3 drawing in game lab
in this lesson 3 level 2
i have Changed the numbers inside the block,  and Tried to place the rectangle near the bottom right of the screen.
rect(381,380);
#lesson 3 level 3
1) Place two rectangles exactly in the corners of the screen
rect(0,0);
#lesson 3 level 4
// 2) Change the color from blue to yellow.
fill("blue");
rect(100,100);
fill("yellow");
rect(250, 100);
fill("yellow");
// 3) Add a new square to the image

rect(200, 200);
#lesson 3 level 5
//2) Change the red rectangle's color to green.
//3) Change the order of the code so the green rectangle appears on top.
fill("green");
rect(200, 200);
fill("blue");
rect(175,175);
#lesson 3 level 6
fill("teal");
ellipse(100,100);
//2) Add a new ellipse of a different color.
fill("yellow");
ellipse(200, 200);
#lesson 3 level 7
drawing car
fill("blue")
rect(150,150)

rect(201,149)

fill("green");
rect(100,200)
rect(150,200)
rect(200,200)
rect(250,200)
fill("red")
ellipse(150,250)
ellipse(249,249)
#lesson 3 level 8 debbuging
//2) Change the code so it makes the picture in the instructions

fill("orange");
ellipse(150,150);
ellipse(200,150);
ellipse(150,200);
ellipse(200,200);
fill("purple");
rect(150, 150);
# lesson 3 level 9 challenge :face
fill("slateblue");
ellipse(123, 182);
ellipse(225, 180);
fill("red");
ellipse(172,270);
fill("green");
rect(49,300);
rect(100,350);
rect(150,350);
rect(200,300);
#lesson 4 level 2
fill("blue");
rect(100,100,100,200);

fill("red");
rect(250,100,100,300);
#lesson 4 level 3
//1) Add an orange ellipse to the screen that is taller than the green one
//2) Rearrange the blocks so the orange ellipse is behind the green one
fill("orange");
ellipse(215,215,215,300);

fill("green");
ellipse(200,200,150,110);
#lesson 4 level 4
background("orange");
fill("purple");
rect(50,50, 100,100);
//2) Change the background from yellow to orange.

fill("blue");
rect(250,250, 100, 100);
#level 5
//1) Make a black background behind the green circle.
background("black");
fill("green");
ellipse(200,200,200,200);
#lev 6
// Draw sky
background("skyblue");

// Draw sun
fill("yellow");
ellipse(350,50,50,50);

// Draw grass
fill("green");
rect(0,300,400, 200);
#lev 7
fill("red");
ellipse(200, 200, 400, 400);
fill("orange");
ellipse(200, 200, 340, 340);
fill("yellow");
ellipse(200, 200, 280, 280);
fill("green");
ellipse(200, 200, 220, 220);
fill("blue");
ellipse(200, 200, 160, 160);
fill("indigo");
ellipse(200, 200, 100, 100);
fill("violet");
ellipse(200, 200, 40, 40);
#lev 8
//1) Debug this program to make the cloud wider than it is tall, like in the image.

// Draw sky
background("skyblue");

// Draw sun
fill("yellow");
ellipse(300,50,50,50);

// Draw grass
fill("green");
rect(0,300,400,100);

// Draw cloud
fill("white");
ellipse(150,100,200,100);
#lev 9
fill("red");
shape(200, 200, 0, 400, 400, 400);
fill("blue");
shape(200, 200, 0, 0, 400, 0);
//2) Finish the code so it matches the picture
fill("yellow");
shape(400, 0, 400, 400, 200, 200);
fill("green");
shape(0, 0, 0, 400, 200, 200);
# lesson 5
lesson 5 lev3
var xPosition = 200;
var whatsTheY = 200;

ellipse(xPosition, whatsTheY);

#level 4 Debug: Naming Variables


var sizeofcircle = 150;
var dimension = 100;
var ylocation = 200;

fill("OrangeRed");
ellipse(dimension, ylocation, sizeofcircle, sizeofcircle);
# level 5 Using a Variable Many Times

This program has only one variable called petalSize but it uses it 8 different times. This makes it easy to quickly make lots of changes to how your picture is drawn.
//1) Update the code so the red petals touch each other
var petalSize = 75;

//Set Up
noStroke();
background("ForestGreen");

// Petals
fill("red");
ellipse(150,200,petalSize,petalSize);
ellipse(200,150,petalSize,petalSize);
ellipse(250,200,petalSize,petalSize);
ellipse(200,250,petalSize,petalSize);

// Flower Center
fill("black");
ellipse(200,200,50,50);
# level 6 Debug: Using Variables

This program uses the variable circleSize to control the width and height of a circle. If you make the circle big enough, it will fill up the entire screen, as in the picture on the righ
hange the value assigned to circleSize so that the circle fills the entire screen.
var circleSize = 560;

fill("Crimson");
ellipse(200, 200, circleSize, circleSize);
# level 7 using Variables

This program currently draws a face, but the eyes are two different sizes. Change the program to use the variable for the size of both eyes, and run the code to make sure both eyes are drawn at the same size.
/2) Change the program to use the eyeSize variable.
var eyeSize = 27;

noStroke();
background("green");

// Face
fill("yellow");
ellipse(200,200,200,200);

// Eyes
fill("black");
ellipse(160,170,eyeSize,eyeSize);
ellipse(240,170,eyeSize,eyeSize);

// Mouth
fill("white");
rect(160,240,80,20);
# level 8 Challenge: Updating Variables
var x = 50;
var y = 50;

fill("red");
ellipse(x, y);
// Increase x by 50, now x is 100
x = x + 50;
ellipse(x, y);
// Increase x by 50, now x is 150
x = x + 50;
ellipse(x, y);
x = x + 50;
ellipse(x, y);
x = x + 50;
ellipse(x, y);
x = x + 50;
ellipse(x, y);
x = x + 50;
ellipse(x, y);
lesson 6 Random Numbers
#level 2
background("tomato");

//1) Change the code so the ellipse can appear anywhere horizontally on the screen
fill("orange");
ellipse(randomNumber(20,40), 200, 50, 50);
#level 3
background("tomato");

//1) Make the ellipse appear at random y coordinates
fill("orange");
ellipse(randomNumber(100,300), 200, 50, 50);
# level 4 Variables and Random Numbers

Variables can be assigned a random number too. This lets you save a single random value so that you can use it as many times as you want in your program.
//1) Make the eyes appear at random sizes
var eyeSize = 27;

noStroke();
background("green");

// Face
fill("yellow");
ellipse(200,200,200,200);

// Eyes
fill("black");
ellipse(randomNumber(160,170),eyeSize,eyeSize);
ellipse (randomNumber(240,170),eyeSize,eyeSize);

// Mouth
fill("white");
rect(160,240,80,20);
#level 5 Changing variable values
var petalSize;
background("green");

//1) Update the first flower's petals to be a random size
petalSize = randomNumber();
// petals
fill("purple");
ellipse(75,100,petalSize,petalSize);
ellipse(125,100,petalSize,petalSize);
ellipse(100,75,petalSize,petalSize);
ellipse(100,125,petalSize,petalSize);
// center
fill("yellow");
ellipse(100,100, 50, 50);

//2) Update the second flower's petals to be a random size
petalSize = randomNumber();
// petals
fill("purple");
ellipse(275,300,petalSize,petalSize);
ellipse(325,300,petalSize,petalSize);
ellipse(300,275,petalSize,petalSize);
ellipse(300,325,petalSize,petalSize);
// center
fill("yellow");
ellipse(300,300, 50, 50);
#level 6 Debug: Random Shape Movement
//2) Update the code so the rectangles appear stacked at random x positions
var xPosition = 100;
fill("pink");
rect(randomNumber(xPosition, 150), 100, 250, 50);
fill("purple");
rect(randomNumber(xPosition, 150), 150, 250, 50);
fill("firebrick");
rect(randomNumber(xPosition, 150), 200, 250, 50);
#level 7
Rainbow Snake
Alexis is working on a program to draw a rainbow snake that "wiggles" each time it's run. She's started the program, but needs help finishing!

//2) Add at least three new different colored circles to your rainbow snake.
//3) Use randomNumber to make the rest of the snake's body move up and down like the first three.

background("skyBlue");

fill("red");
ellipse(100, randomNumber(190,210), 50, 50);

fill("orange");
ellipse(140, randomNumber(190,210), 50, 50);

fill("yellow");
ellipse(180, randomNumber(190,210), 50, 50);
fill("green");
ellipse(220, randomNumber(190,210), 50, 50);
fill("purple");
ellipse(260, randomNumber(190,210), 50, 50);
fill("red");
ellipse(300, randomNumber(190,210), 50, 50);
# level 8
Random Rainbow!
This level uses the rgb() block to set the color of the rainbow. Since the rgb() block uses (Red, Green, Blue) numerical values, it means we can use randomNumber() to generate random colors!
//1) Update the background to be a random color
background(randomNumber(rgb(5, 55, 255)));

//2) Update each arc of the rainbow to a random color
fill(randomNumber(rgb(255,102,102)));
ellipse(200, 200, 400, 400);
fill(randomNumber(rgb(255,178,102)));
ellipse(200, 200, 340, 340);
fill(randomNumber(rgb(255,255,102)));
ellipse(200, 200, 280, 280);
fill(randomNumber(rgb(178,255,102)));
ellipse(200, 200, 220, 220);
fill(randomNumber(rgb(51,153,255)));
ellipse(200, 200, 160, 160);
fill(randomNumber(rgb(153,153,255)));
ellipse(200, 200, 100, 100);
fill(randomNumber(rgb(229,204,255)));
ellipse(200, 200, 40, 40);

//3) Update the ground to a random color
fill(randomNumber(rgb(25, 255, 0)));
rect(0, 200, 400, 200);
#lesson 7 Review the Shape Block
 #level 1
fill("red");
shape(200, 200, 0, 400, 400, 400);
fill("blue");
shape(200, 200, 0, 0, 400, 0);
//2) Finish the code so it matches the picture
fill("yellow");
shape(400, 0, 400, 400, 200, 200);
fill("green");
shape(0, 400, 0, 0, 200, 200);
#level 2
Robot Face
Use at least 4 different shape blocks, at least 4 variables with random numbers to create a robot face with unique and creative features!
// Random variables
var headWidth = randomNumber(100, 200);
var headHeight = randomNumber(150, 250);
var eyeSize = randomNumber(10, 30);
var mouthWidth = randomNumber(50, 100);
var antennaHeight = randomNumber(50, 100);

// Set the background
background("lightblue");

// Head
fill("silver");
rect(100, 100, headWidth, headHeight);

// Eyes
fill("black");
ellipse(140, 150, eyeSize, eyeSize); // Left eye
ellipse(260, 150, eyeSize, eyeSize); // Right eye

// Mouth
fill("red");
rect(150, 250, mouthWidth, 10);

// Antenna
fill("gold");
line(200, 100, 200, 100 - antennaHeight);
triangle(190, 100 - antennaHeight, 200, 80 - antennaHeight, 210, 100 - antennaHeight);

// Ears
fill("gray");
rect(90, 150, 20, 50); // Left ear
#Lesson 8
#lesson 8 level 2
Sprites

Sprites are like containers - they can hold several properties that make it easier to manage our animations and make more complex drawings. Right now, our sprites are just gray rectangular containers.
//1) Create a new sprite variable called sprite1

var sprite1 = createSprite(200, 200);
//2) Draw your sprites on the screen
drawSprites();
##level 3
Debug

This program should create two new sprites, one on the left of the screen and one on the right, but it's only drawing one. You don't need to add any code, just rearrange the code already present to make sure that both sprites show up like the picture on the right.
var leftSprite = createSprite(100, 200);
var rightSprite = createSprite(300, 200);
drawSprites();
#level 4
Investigating Sprites

Let's update the code below so different animations appear for the fruit and vegetable sprites.
How do these blocks work again? (Click here to see)

Do This

    Update the fruit animation
        Use the dropdown menu in the setAnimation() block to select a different sprite to use
    Update the vegetable animation
        Use the dropdown menu in the setAnimation() block to select a different sprite to use
#level 5


    Create a sprite variable called student
        Drag out a createSprite(200, 200) block and change the variable name to student
    Set the animation
        Drag out a setAnimation() block
        Change the first part of the block to be the same name as the variable above: student
        Use the dropdown menu to select different sprites to use as a student
    Draw the sprite on the screen
        Drag out a drawSprites() block
//1) Create a sprite variable
var student= createSprite(200,200);
//2) Set the animation
student.setAnimation("Joseph");

//3) Draw the sprite on the screen
drawSprites();
#level 6
Do This

    Run the code to see what happens.
    Look in the Animation Tab to see what animations are available to you. (Show me where.)
        Feel free to alter your animations or choose a new one.
    Use the setAnimation command to change the look of your other sprites.
var topLeftSprite = createSprite(100, 100);
topLeftSprite.setAnimation("planeRed1");
var topRightSprite = createSprite(300, 100);
topRightSprite.setAnimation("bunny");

var bottomLeftSprite = createSprite(100, 300);
bottomLeftSprite.setAnimation("alien");
var bottomRightSprite = createSprite(300,300);
bottomRightSprite.setAnimation("flyBot");
drawSprites();
#level 7
Do This

    Run the code to see what happens.
    Fix the two problems in the code.

Hint: Just like shapes, sprites are drawn in the order they are created.
var drink = createSprite(100, 200);
drink.setAnimation("soda");
var dessert = createSprite(300, 200);
dessert.setAnimation("ice_cream");
var message = createSprite(200, 200);
message.setAnimation("textGetReady");
drawSprites();
#level 9

var cactus = createSprite(100, 200);
cactus.setAnimation("cactus");
var ladybug = createSprite(250, 320);
ladybug.setAnimation("ladybug");
var snail = createSprite(100, 270);
snail.setAnimation("snail");
var grass2 = createSprite(275, 275);
grass2.setAnimation("grass2");

var grass1 = createSprite(225, 275);
grass1.setAnimation("grass1");



drawSprites();
#level 10
Create your own sprites
Use what you've learned to create your own sprites. The example is just one way to complete the level. Decide for yourself what you want your sprites to look like.
/ 1) Go to the animation tab and add at least two animations to your project.
// 2)In the code tab, create at least two sprites in two different places on the screen.

var baby=createSprite(200,100);
var boy=createSprite(300,50);
// 3) Assign each sprite a different animation.
baby.setAnimation("blue_dress_wave_1");
boy.setAnimation("blue_hanbok_1");
// 4) Draw your sprites to the screen.
drawSprites();

#level 11
Drawing your own image

You can also use the Animation tab to draw your own image. You are going to make your own character by drawing it.
Do This
// Create character sprite and set animation
var character = createSprite(200, 300);
character.setAnimation("animation_1");

// Draw background
background("skyblue");

// Draw grass
fill("green");
noStroke();
rect(0, 300, 400, 100);

// Draw sprite

drawSprites();
#lesson 9
Sprite Properties

Sprite properties keep track of all the information your program needs to know about a sprite, such as its size and location. You can change the values of these properties just like you do variables, and see the results when your sprite is drawn to the screen.
#level 2
//1) Run the program to see where the sprites appear.
var palette = createSprite();
palette.setAnimation("paint_palette");
var brush = createSprite();
brush.setAnimation("paint_brush");
palette.x = 100;
palette.y = 300;
//2) Change the location of the paint brush to touch the paint palette.
brush.x= 100;
brush.y = 250;
drawSprites();
#level 3 new properties
//1) Run the program to see how what is different about the first two notes.
//2) Use the same blocks on the last two notes to make them look different, too.
background("skyblue");
var drums = createSprite(200,290);
drums.setAnimation("drum_set");
var note1 = createSprite(50,50);
note1.setAnimation("eighth_note");
note1.scale = 0.3;
note1.rotation = 20;
var note2 = createSprite(150,50);
note2.setAnimation("eighth_note");
note2.scale = 0.7;
note2.rotation = -30;
var note3 = createSprite(250,50);
note3.setAnimation("eighth_note");
note3.scale=0.5;
note3.rotation=-45;
var note4 = createSprite(350,50);
note4.setAnimation("eighth_note");
note4.scale=0.2;
note4.rotation=90;
drawSprites();
#level 4
Scale Property

The scale property changes the size of the sprite. Scale of 1 is the normal size, scale of 2 is twice as big, and a scale of 0.5 is half as big.
//1) Fix the code so that it looks like the picture.
background("darkseagreen");
fill("deepskyblue");
ellipse(75, 75, 75, 75);
var fly = createSprite(25, 25);
fly.setAnimation("fly");
fly.scale = 0.5;

var fish = createSprite(75, 75);
fish.setAnimation("fish");
fish.scale = 0.5;

var cow = createSprite(150, 150);
cow.setAnimation("cow");
cow.scale = 0.5;

var elephant = createSprite(300, 300);
elephant.setAnimation("elephant");
elephant.scale = 0.5;

drawSprites();
#level 5
Make it Fit!

The food is way too big to fit on the plate. Use your knowledge of sprite properties to make it fit.
Do this

    Run the program to see how big the food is.
    Use sprite properties to scale all of the food sprites down so they fit on the plate.
//1) Run the program to see how big the food is.
//2) Use sprite properties to scale all of the food sprites down so they fit on the plate.
background("burlywood");
fill("white");
ellipse(200,200, 350);
var fries = createSprite(250,140);
fries.setAnimation("fries");
fries.scale=0.5;
var burger = createSprite(110,200);
burger.setAnimation("burger");
burger.scale=0.5;
var dessert = createSprite(240,270);
dessert.setAnimation("watermelon");
dessert.scale=0.5;
drawSprites();
#level 6
Height and Width

You learned about the scale property, which grows or shrinks a sprite while keeping their height to width ratio the same. But it is possible to only change the height or width of a sprite with other properties!
//1) Using either the sprite already created for you or with any other sprites of your choosing, 
//play around with the height and width properties and think about when you would want to use these properties 
//versus using the scale property
var sprite = createSprite(200, 200);
sprite.setAnimation("giraffe_tall");
sprite.height=200;
sprite.width=400;
drawSprites();
#lesson 10
Text

You can put text anywhere you'd like on the screen using the text block. Read the documentation by clicking on the block in the toolbox to see how to change the size and color of your text.
background("lightyellow");
//1) Change the displayed text in the provided code.
text("Change me and add another text block!", 50, 200);
//2) Add another sentence in a different part of the screen.
text("another text in a different part of screen!",20,160);

#Text Size
//1) Run the code to see how it works.
background("lightblue");
textSize(20);
text("small", 170, 100);
textSize(40);
text("medium", 130, 200);
//2) Add code to make the word "large" the biggest.
text("large", 120, 300);
textSize(80);
You can change the size of the text using the textSize block.
Debug Text
//1) Run the code, and see the error message.
//2) Look for clues as to where the bug is in the code.
//3) Once you have found the bug, fix it.
var backdrop = createSprite(200,200);
backdrop.setAnimation("city");
var flybot = createSprite(100,250);
flybot.setAnimation("fly_bot");
var wingbot = createSprite(300,150);
wingbot.setAnimation("wing_bot");
var speech1 = createSprite(120,80);
speech1.setAnimation("speechLeft");
var speech2 = createSprite(280,310);
speech2.setAnimation("speechDown");

drawSprites();
textSize(20);
stroke("black");
text("What has" , 60, 40);
text("wheels and flies," , 40, 65);
text("but is not an" , 50, 90);
text("aircraft?" , 70, 115);
text("A garbage truck!", 220,320);
Add Text
//1) Add two pieces of text to the following scene.  
//2) Make the two pieces of text different sizes.
var grass = createSprite(200,200);
grass.setAnimation("floating_grass");
var alien = createSprite(180,100);
alien.setAnimation("alien");
alien.scale = 1.3;

var robot = createSprite(300,300);
robot.setAnimation("robot");
robot.scale = 0.2;
fill("red");

drawSprites();
fill("red");
text("text1",50,200);
textSize(40);
text("text2",50,250);
textSize(30);
Text Color

You can change the color of your text using the fill block
//1) Read the code to see how it works.
var sky = createSprite(200,200);
sky.setAnimation("rainbow");
drawSprites();
textSize(50);
fill("red");
text("Rainbows", 30, 50);
fill("orange");
text("in the" , 70, 100);
//2) Add a new block to make the word "sky" a different color.
fill("purple");
text("sky...", 110, 150);
#lesson 11
//3) Add more text with even more colors.
fill(rgb(255, 0, 0));
text("this is new text",50,200);
MINIPROJECT
background(rgb(91, 60, 140));
fill("white");
ellipse(250,150, 200,200);
fill("red");
rect(200,250,100,200);
var sprite1=createSprite(50,80);
sprite1.setAnimation("kidportrait_09_1");
sprite1.scale=0.5;
var sprite2=createSprite(50,270);
sprite2.setAnimation("kidportrait_14_1");
sprite2.scale=0.5;
drawSprites();
fill("yellow");
textSize(40);
text("welcome ! ",80,180);

fill("green");
textSize(40);
text("Get in to your home",50,300);
#lesson 12
Using the Draw Loop
//1) Add code to this program so that your drawing has orange circles being drawn, too.
noStroke();

function draw(){
  fill("green");
  ellipse(randomNumber(0,400), randomNumber(0,400));
  fill("orange");
  ellipse(randomNumber(0,400),randomNumber(0,400));
}
World.frameRate = 5;

noStroke();
background("blue");
fill("Yellow");

function draw(){
  background("Red");
  ellipse(randomNumber(0,400), randomNumber(0,400));
}
//1) Run the code to see how it works.
//2) Discuss with your partner why some code is inside the draw loop and some code is outside.
var sprite = createSprite(100,200);
sprite.setAnimation("greenAlien");
function draw() {
  background("orange");
  //3) Try changing the numbers in the random number block and running the program again.
  sprite.rotation = randomNumber(0, 100);
  drawSprites();
}
//1) Run the program to see how it works.
var pencil = createSprite(100,200);
pencil.setAnimation("pencil");

var brush = createSprite(300,200);
brush.setAnimation("brush");

function draw(){
  background("white");
  pencil.x = randomNumber(100,110);
  //2) Edit the code in this program to make the second sprite shake like the first one.
  brush.x =randomNumber(50,70);
  drawSprites();
}
//1) Run the program to see the bug.
//2) Use the clues to try to find the bug.
var blender = createSprite(200,200);
  blender.setAnimation("blender");
function draw() {
  background("lightyellow");
  blender.x = 200 + randomNumber(-5,5);
  blender.y = 200 + randomNumber(-5,5);
  drawSprites();
}
//1) Add the draw loop block to the bottom of this program.
//2) Move any blocks that need to be inside the draw loop.

var salt = createSprite(200,200);
salt.setAnimation("salt");


function draw(){
  background("skyblue");
  salt.x=200+randomNumber(-10,10);
  salt.y=250+randomNumber((-10,10));
  drawSprites();
}
//1) Add or draw your sprites in the Animation Tab.

//2) Create your sprites and set its animation.
var imog=createSprite(200,250);
imog.setAnimation("emoji_10_1");
//3) Add a draw loop and add the code needed to animate your favorite animal.
function draw(){
background("green");
imog.x=200+randomNumber(-5,5);
imog.y=200+randomNumber(-5,5);
drawSprites();
  
}
#lesson 13
Sprite Movement
var jet = createSprite(350, 350);
jet.setAnimation("jet");
var plane = createSprite(50, 200);
plane.setAnimation("plane");

function draw() {
  background("skyblue");
  
  //1) Read the code that makes the jet go up the screen
  jet.y = jet.y - 3;
  
  //2) Add code that makes the plane move to the right
  plane.x=plane.x+3;

  drawSprites();
}
var fly = createSprite(350, 200);
fly.setAnimation("fly");

function draw() {
  background("skyblue");
  //1) Use the counter pattern to make the sprite move to the left.
fly.x=fly.x-3;

  drawSprites();
}
//1) Read the code that makes the mouse go down.
//2) Run the program and look at the watchers to see what is happening 

var mouse = createSprite(50, 50);
mouse.setAnimation("mouse");
mouse.scale = 0.5;

function draw() {
  background("lightgreen");
  mouse.y = mouse.y + 2;
  //3) Add one more line of code to make the mouse move diagonally.
  mouse.x=mouse.x+2;
  drawSprites();
}

//4) Run your code again and look at the watchers.
Rotation Direction
var blueGear = createSprite(100, 220);
blueGear.setAnimation("blue_gear");

var greenGear = createSprite(183, 298);
greenGear.setAnimation("green_gear");

var redGear = createSprite(185, 145);
redGear.setAnimation("red_gear");


function draw() {
  background("white");
  //1) Make the gears rotate so they look like they are working as one system
  blueGear.rotation=blueGear.rotation+2;
  redGear.rotation=redGear.rotation-2;
  greenGear.rotation=greenGear.rotation+2;
  drawSprites();
}
Fish Animation
var orangeFish = createSprite(400, randomNumber(0, 100));
orangeFish.setAnimation("orange_fish");
var blueFish = createSprite(250, randomNumber(0, 200));
blueFish.setAnimation("blue_fish");
var greenFish = createSprite(300, randomNumber(200, 300));
greenFish.setAnimation("green_fish");

function draw() {
  // Draw Background
  background("navy");
  
  // Update Values
  orangeFish.x = orangeFish.x - 3;
  
  //1) Use the counter pattern to make the blue fish move across the screen faster than the other fish
blueFish.x=blueFish.x-6;
  //2) Use the counter pattern to make the green fish move across the screen slower than the other fish.
  greenFish.x=greenFish.x-1;
  // Draw Animations
  drawSprites();
}

var orangeFish = createSprite(400, randomNumber(0, 100));
orangeFish.setAnimation("orange_fish");
var blueFish = createSprite(250, randomNumber(0, 200));
blueFish.setAnimation("blue_fish");
var greenFish = createSprite(300, randomNumber(200, 300));
greenFish.setAnimation("green_fish");
var yPosition=400;
stroke("black");
ellipse(200, 200, 200, 100);
var bubbleY=400;
function draw() {
  // Draw Background
  background("navy");
  
  // Update Values
  orangeFish.x = orangeFish.x - 2;
  greenFish.x = orangeFish.x - 4;
  blueFish.x = orangeFish.x - 4;
   fill("white");
  stroke("black");
  ellipse(100, bubbleY, 30, 30); 

 
  bubbleY = bubbleY - 2;
  
   fill("white");
  stroke("black");
  ellipse(150, bubbleY, 30, 30); 

 
  bubbleY = bubbleY - 2;
  
   fill("white");
  stroke("black");
  ellipse(200, bubbleY, 30, 30); 

 
  bubbleY = bubbleY - 2;
  
  // Draw Animations
  drawSprites();
}
#lesson 14
MINIPROJECT 
fill("white");
ellipse(280,100);
var sprite1=createSprite(250,250);
sprite1.setAnimation("soccer_bw_1");
sprite1.scale=0.25;
var sprite2=createSprite(100,150);
sprite2.setAnimation("soccer_yellow_1");
sprite2.scale=0.25;
function draw(){
  background("green");
  sprite1.y=sprite1.y+3;
  sprite2.x=200+randomNumber(30,40);
  drawSprites();
  fill("black");
textSize(40);
text("welcome to football field ",50,50);
fill("orange");
textSize(40);
text("lets play together",50,350);
  
}
#lesson15
Boolean Expressions

Boolean expression - an expression that can only evaluate to TRUE or FALSE
ooleans

The program draws a race car and a finish line. We are going to figure out when the race car crosses the finish line. The sprites have all been set up for you.
var finishLine = createSprite(40, 200);
finishLine.setAnimation("finish_line");

var raceCar = createSprite(400, 200);
raceCar.setAnimation("race_car");

function draw() {
  // Draw Background
  background("white");
  
  // Counter pattern to make car move across the screen
  raceCar.x = raceCar.x - 2;
  
  //Program text
  fill("black");
  strokeWeight(5);
  textSize(25);
  text("The race car has crossed the finish line:", 100, 20, 300, 60);
  fill("blue");
  //1) Add blocks to the text command to print the boolean to the screen
  text(raceCar.x<finishLine.x,100, 100);
  
  
  // Draw Animations
  drawSprites();
}

If Statement

Boolean expressions allow us to ask questions, but in order to use those questions to change the program's behavior, we need an if () statement.



var finishLine = createSprite(40, 200);
finishLine.setAnimation("finish_line");

var raceCar = createSprite(400, 200);
raceCar.setAnimation("race_car");

function draw() {
  // Draw Background
  background("white");
  
  // Update values
  raceCar.x = raceCar.x - 2;
  if (raceCar.x < finishLine.x) {
    text("THE ORANGE CAR IS THE WINNER!",100,100);
  }
  // Draw Animations
  drawSprites();
Changing Fruit

Now that we know how to use if () statements, you can do more than just check if the apple has reached a scale of 2. You turn it into a pear once it happens.
var fruit = createSprite(200, 200);
fruit.setAnimation("apple");
fruit.scale = 0.1;

function draw() {
  // Draw Background
  background("white");
  
  // Update Values
  fruit.scale = fruit.scale + 0.01;
  
  //1) Add a conditional to the draw loop.
  if(fruit.scale>2){
    fruit.setAnimation("pear");

  }
  //2) Add code to the conditional statement that asks if the scale of the fruit greater than 2.
  //3) Add code inside the conditional to change the fruit to a pear.




  // Draw Animations
  drawSprites();
Boolean Expressions

The simplest Boolean expressions are questions that the computer can answer with true or false. Another way to say this is that Boolean expressions evaluate to true or false.
// Modify these sprite properties so that all of the
// boolean commands print true on the screen
var sprite1 = createSprite(200, 200);
sprite1.setAnimation("apple");
sprite1.rotation = 30;
sprite1.scale = 0.5;

var sprite2 = createSprite(100, 100);
sprite2.setAnimation("carrot");
sprite2.rotation = 30;
sprite2.scale = 0.5;

// Do NOT edit the following (I'm serious!!!)
drawSprites();
textSize(20);
fill("blue");
text("Comparison 1: " + (sprite2.x == sprite2.y), 0, 15);
text("Comparison 2: " + (sprite2.rotation < 40), 0, 40);
text("Comparison 3: " + (sprite1.scale == sprite2.scale), 0, 65);
text("Comparison 4: " + (sprite1.x > 150), 0, 90);
text("Comparison 5: " + (sprite2.y < 200), 0, 115);

Magic Dinosaur

Use an if () statement to make the dinosaur turn into a pterodactyl when it reaches the sky.
var backdrop = createSprite(200,200);
backdrop.setAnimation("sci_fi");
var dinosaur = createSprite(200, 350);
dinosaur.scale = 0.2;
dinosaur.setAnimation("tyrannosaurus");

function draw() {
  //move the dinosaur up
  dinosaur.y = dinosaur.y - 5;

  //2) Add a conditional that detects when the dinosaur is in the sky.
  //3) Set the sprite's animation to a pterodactyl when it reaches the sky.
if(dinosaur.y<150){
  dinosaur.setAnimation("pterodactyl");
}

  //draw everything
  drawSprites();
}
Visible

Sometimes it's useful to hide the image for a while and then have it appear when you want. You can do this using the visible property. The visible property is a little different from other properties you have seen in the past: It is a Boolean value, either true (the sprite is visible) or false (the sprite is not visible). By default, visible is set to true.
var balloon = createSprite(200, 200);
balloon.setAnimation("balloon");
balloon.scale = 0.1;

//1) Create a pop sprite which uses the "pop" visual in the animation tab.

var pop =createSprite(300,200);
pop.setAnimation("pop");
//2) Set the pop sprite to be hidden at the beginning.

pop.visible=false;
function draw() {
  // Draw Background
  background("white");

  // Update Values
  balloon.scale = balloon.scale + 0.001;

  //3) Add a conditional that checks the size of the balloon to see when it touches the edge of the screen.
  //4) Inside your conditional, set the balloon sprite to be hidden *and* set the pop sprite to appear.
if(balloon.scale>1){
  balloon.visible=false;
pop.visible=true;

}



  // Draw Animations
  drawSprites();
}
#lesson 16
changing Sprites

This program uses the keyDown() block to detect whether a specific keys are being pressed down.
//1) Run the code and try pressing the "p" and "h" keys.
var sprite = createSprite(200, 200);
sprite.setAnimation("giraffe");

function draw() {
  background("white");

  //2) Look inside the first two conditional statements to see how the code works.
  if(keyDown("h")) {
     sprite.setAnimation("hippo");
  }

  if(keyDown("p")) {
     sprite.setAnimation("pig");
  }

  if(keyDown("r")) {
      //3) Add code to change the sprite to a different animal when the "r" key is pressed.
sprite.setAnimation("rabbit");
  }

  drawSprites();
}

Moving Sprites

You can change your sprite's position based on key presses in the same way you changed its animations.
var bug = createSprite(200, 200);
bug.setAnimation("ladybug");

function draw() {
  //Draw Background
  background("white");
  //1) Add a conditional statement to check if the right arrow key has been pressed down.
if(keyDown("RIGHT_ARROW")){
  bug.x=bug.x+2;
}
  //2) Add code to move the sprite right if the right arrow is down.


  //Draw Animations
  drawSprites();
}
Gears with Conditionals

Let's make the gears spin only if the space key is being held down.
var blueGear = createSprite(100, 220);
blueGear.setAnimation("blue_gear");

var greenGear = createSprite(183, 298);
greenGear.setAnimation("green_gear");

var redGear = createSprite(185, 145);
redGear.setAnimation("red_gear");

function draw() {
  background("white");
 
  //1) Add code that will check if the space key is being pressed down.
  //2) Adjust the program so that the gears only rotate when the space key is pressed down.
if(keyDown("space")) {blueGear.rotation = blueGear.rotation - 1;
  greenGear.rotation = greenGear.rotation + 1;
  redGear.rotation = redGear.rotation + 1;
}
  drawSprites();
}
Fish With Arrows

The fish are back. Can you make the fish move left only if the left arrow key is pressed down?
var bubbleY=400;
function draw() {
  // Draw Background
  background("navy");
  
  // Update Values
  
  if(keyDown("LEFT_ARROW")){orangeFish.x = orangeFish.x - 2;
  greenFish.x = orangeFish.x - 4;
  blueFish.x = orangeFish.x - 4;}
   fill("white");
  stroke("black");
  ellipse(100, bubbleY, 30, 30); 

 
  bubbleY = bubbleY - 2;
  
   fill("white");
  stroke("black");
  ellipse(150, bubbleY, 30, 30); 

 
  bubbleY = bubbleY - 2;
  
   fill("white");
  stroke("black");
  ellipse(200, bubbleY, 30, 30); 

 
  bubbleY = bubbleY - 2;
  
  // Draw Animations
  drawSprites();
}
var backdrop = createSprite(200,200);
backdrop.setAnimation("rainbow");
var flyer = createSprite(200,200);
flyer.setAnimation("wing_bot");

function draw() {

  //1) Add code to move the sprite left when the left arrow is pressed
if(keyDown("right")){
 flyer.x=flyer.x+2;
}
  //2) Add code to move the sprite right when the right arrow is pressed
if(keyDown("left")){
  flyer.x=flyer.x-2
}
  //3) Add code to move the sprite up when the up arrow is pressed
if(keyDown("DOWN_ARROW")){
 flyer.y=flyer.y+2;
}
  //4) Add code to move the sprite down when the down arrow is pressed
if(keyDown("UP_ARROW")){
  flyer.y=flyer.y-2;
}
drawSprites();
}
Keyboard Input Challenges

Try out these new blocks and challenges with keyboard input.
Responding to a Single Click

This game counts how many times someone pressed the space bar, but it keeps giving points when the space bar is still pressed, even if it's not a new press.

The block keyWentDown() will only give a point for new presses, so it's a better choice for this program.
var clicks = 0;

function draw() {
  // 2) Change the code to use the new block, so the program only gives you a point for new clicks.
  if (keyWentDown("space")) {
      clicks = clicks + 1;
  }
  background("white");
  textSize(50);
  text(clicks, 165, 175, 70, 50);
}
# lesson 17 MOUSE INPUT
If/Else Predict
var balloon = createSprite(200, 200);
balloon.setAnimation("balloon");
balloon.scale = 0.6;

function draw() {
  // Draw Background
  background("white");
  
  // update balloon size based on user input
  if (keyDown("space")) {
      balloon.scale = balloon.scale + 0.02;
  } else {
      balloon.scale = balloon.scale - 0.01;
  }

  // Draw Animations
  drawSprites();
}
Reverse the Gears
var blueGear = createSprite(100, 220);
blueGear.setAnimation("blue_gear");

var greenGear = createSprite(183, 298);
greenGear.setAnimation("green_gear");

var redGear = createSprite(185, 145);
redGear.setAnimation("red_gear");

function draw() {
  background("white");
  
  if (keyDown("space")) {
    blueGear.rotation = blueGear.rotation - 1;
    greenGear.rotation = greenGear.rotation + 1;
    redGear.rotation = redGear.rotation + 1;
  }
  //1) Make the gears spin the opposite way when the space bar is **not** being pressed.
  else{
    blueGear.rotation = blueGear.rotation +1;
    greenGear.rotation = greenGear.rotation -1;
    redGear.rotation = redGear.rotation -1;
  }
  drawSprites();
}
Control the Gears
Here is the same program, but with one small difference.
var blueGear = createSprite(100, 220);
blueGear.setAnimation("blue_gear");

var greenGear = createSprite(183, 298);
greenGear.setAnimation("green_gear");

var redGear = createSprite(185, 145);
redGear.setAnimation("red_gear");

function draw() {
  background("white");
  
  if (mouseDown("leftButton")) {
    blueGear.rotation = blueGear.rotation - 1;
    greenGear.rotation = greenGear.rotation + 1;
    redGear.rotation = redGear.rotation + 1;
  }
  //3) Make the gears spin the opposite way when there is no user input.
else{
   blueGear.rotation = blueGear.rotation +1;
    greenGear.rotation = greenGear.rotation -1;
    redGear.rotation = redGear.rotation -1;
}
  
  drawSprites();
}
Mouse Clicks
Here's a program that drops a balloon down the screen. Use an if / else statement to make the balloon go up and down according to whether or not the user is pressing the mouse.
var balloon = createSprite(200, 50);
balloon.setAnimation("balloon");
balloon.scale = 0.1;

function draw() {
  background("white");
  
  //1) Add code that checks whether the mouse is being pressed.
  //2) Move the balloon up the screen if the mouse is being pressed.
  //3) Otherwise, move the balloon down the screen.

 if(mouseDown()) {balloon.y = balloon.y -1;
}
else{
  balloon.y = balloon.y +1;
}
  drawSprites();
}
World.mouseX
This program uses an if () block to shake the blender when the mouse is on left side of the screen.
var blender = createSprite(100, 300);
blender.setAnimation("blender");
var mixer = createSprite(300, 300);
mixer.setAnimation("mixer");

function draw() {
  background("lightyellow");
  fill("burlywood");
  rect(0, 350, 400, 50);
  if (World.mouseX < 200) {
    blender.x = randomNumber(95, 105);
    blender.y = randomNumber(295, 305);
  }
  
  //2) Add to the conditional so that when the mouse is on the other side of the screen, the mixer shakes instead.
else{
  mixer.x=randomNumber((295,300));
  mixer.y=randomNumber((295,300));
}
  drawSprites();
}
Emoji Reactions
Add code so that when the user presses down the mouse, the emoji changes to a new face. Otherwise, the emoji returns to a smiling emoji.
var emoji = createSprite(200, 200);
emoji.setAnimation("smileEmoji");

function draw() {
  background("white");
  //1)If the mouse is pressed down, change the emoji to a different emoji
  if (mouseDown()) {
    emoji.setAnimation("glassesEmoji");
    
  }
  
  
  //2)Otherwise, keep the emoji as a smile emoji
  else {
    emoji.setAnimation("smileEmoji");
  }
  
  
  
  drawSprites();
}
Fix the Program
This program should only shake the creature when the mouse is pressed, and only show directions when the mouse is not pressed.
var backdrop = createSprite(200,200);
backdrop.setAnimation("sky");
var creature = createSprite(200,250);
creature.setAnimation("creature");
creature.scale = 0.2;
function draw() {
  //1) Change the code so that the creature only shakes when the mouse is pressed.
 if(mouseDown()) {creature.rotation = randomNumber(-5,5);
  drawSprites();}

  //2) Change the code so the directions ("Press the mouse to shake the creature.") **only show** 
  //when the user is **NOT** pressing the mouse.
 else{ 
   fill("black");
  textSize(40);
  text("Press the mouse to shake the creature.", 20, 50, 360, 100);
 }
}
Mouse Challenges
Try out these new blocks and challenges with mouse input.
Changing Emoji
var emoji1 = createSprite(200, 200);
var emoji2 = createSprite(200, 200);
emoji1.setAnimation("emoji1");
emoji2.setAnimation("emoji2");

// Start with emoji1 visible and emoji2 hidden
emoji1.visible = true;
emoji2.visible = false;

function draw() {
  background("white");

  // Check if the mouse is pressed
  if (mouseWentDown("leftButton")) {
    // Show emoji2 and hide emoji1 when the mouse is pressed
    emoji1.visible = false;
    emoji2.visible = true;
  } else if (mouseWentUp("leftButton")) {
    // Show emoji1 and hide emoji2 when the mouse is released
    emoji1.visible = true;
    emoji2.visible = false;
  }

  drawSprites();
}
#lesson 18 Interactive Card 
// PROJECT
// Create sprites
var heart = createSprite(200, 200);
heart.setAnimation("heart");
var emoji1 = createSprite(70, 250);
emoji1.setAnimation("emoji1");
var emoji2 = createSprite(350, 250);
emoji2.setAnimation("emoji2");

// Initialize properties
heart.rotation = 0;
heart.scale = 0.5;

emoji1.rotation = 0;
emoji1.scale = 0.5;
emoji2.rotation = 0;
emoji2.scale = 0.5;

function draw() {
  background("skyblue");
  

  // Display and animate text and rotate sprites when the space bar is pressed
  if (keyDown("space")) {
    // Display secret message
    textSize(30);
    fill("purple");
    text("I LOVE YOU !!!", random(50, 60),100); // Animate position
    text("XO XO", random(50, 60), 150); // Animate position
                                                                                                                                                      
    heart.x = randomNumber(195,205);  
    emoji1.rotation -= 3; // Rotate first emoji
    emoji2.rotation += 3; // Rotate second emoji  
    emoji1.visible=true;
    emoji2.visible=true;
    heart.visible=true;
    
  }
  else{
    textSize(30);
    fill("black");
    text("Press space bar to ", 10, 180);
    text(" see the secret message", 2, 220);
    
  
   emoji1.visible=false;
    emoji2.visible=false;
    heart.visible=false;
    
  }

  drawSprites();
}
##############################
chapter 2 Building a Game
Predict

You've learned about the counter pattern - now let's compare that to the new velocity block.
var fly = createSprite(25, 150);
fly.setAnimation("fly");
fly.velocityX = 2;

var mouse = createSprite(25, 335);
mouse.setAnimation("mouse");

function draw() {
  // draw the background
  background("lightblue");
  fill("green");
  noStroke();
  rect(0, 350, 400, 50);
  
  mouse.x = mouse.x + 2;
  
  drawSprites();
}
velocityX

One way to move sprites in Game Lab is with the counter pattern. For example moves a sprite by 1 pixel each frame of the draw loop. This pattern is so common that sprites have a velocityX property that does this for you.
var fish = createSprite(50, 150);
fish.setAnimation("orange_fish");
//1) Add the new movement block outside of the draw loop.
fish.velocityX=1;


//2) Assign the velocity a value of 1.

function draw() {
  // draw the background
  background(rgb(0,50,250));
  fill(rgb(250,250,250, 80));
  noStroke();
  ellipse(60, 20, 50, 50);
  ellipse(150, 100, 50, 50);
  ellipse(300, 130, 50, 50);
  ellipse(250, 200, 50, 50);
  ellipse(20, 250, 50, 50);
  ellipse(370, 330, 50, 50);
  fill(rgb(219, 208, 125));
  noStroke();
  ellipse(100, 400, 300, 100);
  ellipse(300, 400, 300, 75);
  
  drawSprites();
}
Immersive Reader
Moving Down

Here is a feather sprite that should be floating down the screen. If velocityX makes a sprite move to the right, can you find the block that will make the feather move down?
//1) Find the block that will make the feather sprite go down the screen

var feather = createSprite(200, 50);
feather.setAnimation("feather");
//2) Use that block outside of the draw loop.
feather.velocityY=1;


//3) Give the block a value to make the feather move down the screen.

function draw() {
  background("skyblue");
  drawSprites();
}
rotationSpeed

You can use rotationSpeed to make your sprites spin. If you want your sun to rotate by two degrees each time it's drawn, you can use sun.rotationSpeed = 2; outside of the draw loop, after you create your sprite.
var sun = createSprite(200, 200);
sun.setAnimation("sun");
//1) Make the sun rotate by 3 degrees each time it's drawn.
sun.rotationSpeed=3;


function draw() {
  background("blue");
  drawSprites();
}
Controlling Speed

You used rotationSpeed outside the draw loop to make your sprite rotate when your program started. You can also use rotationSpeed inside the draw loop to change the speed of the sprite during the game. For example, a sprite can start rotating when the user presses the space bar, and it will keep rotating until it's told to stop.
var wheel = createSprite(200, 200);
wheel.setAnimation("wheel");

function draw() {
  background("blue");


  if (keyWentDown("space")) {
    //2) Make the color wheel start spinning when the user presses the space bar.
wheel.rotationSpeed=3;

  }

  drawSprites();
}
Changing Velocity with Position

One advantage to using the velocity blocks inside conditionals (if () blocks) is that your sprite keeps moving, even after the condition stops being true. For example, you only had to press a key once to start the color wheel spinning, and it kept spinning forever. The code below uses if statements to make a fish sprite move in different directions.
var fish = createSprite(200, 200);
fish.setAnimation("fishR");
fish.velocityX = 2;

function draw() {
  background("blue");

  if (fish.x < 0) {
    fish.setAnimation("fishR");
    fish.velocityX = 2;
  }
  if (fish.x > 400) {
    fish.setAnimation("fishL");
    fish.velocityX = -2;
  }
  drawSprites();
}

Back and Forth

This ball bounces back when it hits the bottom of the screen. Can you make it bounce back when it hits the top of the screen?
var field = createSprite(200,200);
field.setAnimation("field");
var ball = createSprite(200, 50);
ball.setAnimation("ball");
ball.scale = 0.2;
ball.velocityY = 5;

function draw() {
  //2) Look at how conditionals and velocity are used to make the ball bounce at the bottom of the screen.
  if (ball.y > 380) {
    ball.velocityY = -5;
  }
  //3) Add code to make the ball bounce at the top of the screen.
if (ball.y==0){
  ball.velocityY=+5;
}
  drawSprites();
}
Paintbrush

Use if () statements with velocity to make the paintbrush dip in the paint.
var palatte = createSprite(180, 350);
palatte.setAnimation("paint_pallette");
var brush = createSprite(220, 50);
brush.setAnimation("paint_brush");

function draw() {
  background("skyblue");
  
  //1) Use a conditional to send the paint brush down if the down arrow is pressed.
if(keyDown(DOWN_ARROW)){
  brush.velocityY= +5;
}

  //2) Use a different conditional to send the paint brush up if it reaches the palette.
if(brush.y>350){
  brush.velocityY = -5;
}

  drawSprites();
}
Swimming Right and Left

The code below should make the fish start moving right once you press the right-arrow, and then it should continually swim back and forth. You should use conditional statements and the velocity block to make the fish swim.
var fish = createSprite(200, 200);
fish.setAnimation("fishR");

function draw() {
  background("blue");
  //2) Use a the correct block inside each conditional statement to make the three following movements:

  //If the user presses the right arrow key, move the fish to the right.
  if (keyWentDown("right")) {
fish.velocityX=2;
  }

  //If the fish gets to the right-hand side of the screen, move the fish to the left.
  if (fish.x > 400) {
fish.velocityX=-2;
  }

  //If the fish gets to the left-hand side of the screen, move the fish to the right.
  if (fish.x < 0) {
    fish.velocityX=2;

  }
  
  //3) The fish should always be facing the same direction it's moving, so you will also need to
  //update the fish's animation inside each of the conditional statements.

  // Draw the fish.
  drawSprites();
}
Changing Course

Study the animation to the right. Notice that the purple alien sprite changes between x and y velocities when it is near each corner of the screen.
var alien = createSprite(50,200);
alien.setAnimation("alien");
alien.velocityX = 0;
alien.velocityY = -3;

function draw() {
  //2) Add the appropriate velocity blocks to each conditional 
  //to make the alien complete the full circuit.

  if (alien.y < 50) {
alien.velocityX= 5;
alien.velocityY= 0;
  }
  if (alien.x > 350) {
alien.velocityY= 5;
alien.velocityX= 0;
  }
  if (alien.y > 350) {
alien.velocityX=-5;
alien.velocityY=0;

  }
  if (alien.x <50) {
alien.velocityX=0;
alien.velocityY=0;

  }
  
  drawSprites();
}

var space = createSprite(200, 200);
space.setAnimation("space");
var flag1 = createSprite(50, 50);
flag1.setAnimation("yellow_flag");
var flag2 = createSprite(350, 50);
flag2.setAnimation("yellow_flag");
var flag3 = createSprite(350, 350);
flag3.setAnimation("yellow_flag");
var flag4 = createSprite(50, 350);
flag4.setAnimation("yellow_flag");
alien.depth=7;
#lesson 2o COLLISION DETECTION
isTouching()

Writing out the math each time you want to check whether two sprites are touching can take a while, so a programmer created the isTouching() block, which can check whether one sprite is touching another sprite (the target). The computer is still doing the same math as in the previous program, but you don't have to worry about it because another programmer already did that work.
// Create the sprites and start them moving
var backdrop = createSprite(200,200);
backdrop.setAnimation("meadow");
var bunny = createSprite(50, 300);
bunny.setAnimation("bunny");
bunny.velocityX = 3;
var robot = createSprite(400, 320);
robot.setAnimation("robot");
robot.scale = 0.2;
robot.velocityX = -3;
var dinner = createSprite(370, 350);
dinner.setAnimation("stew");
dinner.velocityX = -3;

function draw() {
  //1) Check if the bunny is touching the dinner.
  if (bunny.isTouching(dinner)) {
    // stop everything and change to empty bowl
    bunny.velocityX = 0;
    dinner.velocityX = 0;
    robot.velocityX = 0;
    dinner.setAnimation("bowl");
  }
  drawSprites();
}
Applesauce

In this program, the blender should only "turn on" when the apple touches it.
// create the sprites
var apple = createSprite(200, -50);
apple.setAnimation("apple");
apple.velocityY = 5;
var blender = createSprite(200, 330);
blender.setAnimation("blender");

function draw() {
  //1) Check if the apple is touching the blender.
  if (apple.isTouching(blender)) {
    
  //2) Make the blender shake only when the apple is touching it.
  blender.x = 200 + randomNumber(-5,5);
  }
  
  


  //make the background
  background("skyblue");
  strokeWeight(0);
  fill("sienna");
  rect(0, 340, 400, 60);
  
  drawSprites();
}
Debugging Collisions

The balloon is popping before the tack touches it. You can use the debug block to get more information about the bug in the program!
var balloon = createSprite(200,200);
balloon.setAnimation("balloon");
//2) Change the code on line 4 from false to true.
balloon.debug = true;
//3) Debug the tack sprite.


var tack = createSprite(350, 50);
tack.setAnimation("tack");
tack.debug = true;
function draw() {
  background("gray");
  
  // check if tack is touching balloon
  if (balloon.isTouching(tack)) {
    // replace balloon image
    balloon.setAnimation("popped");
  }
  // make tack move with arrow keys
  if (keyDown("up")) {
    tack.y = tack.y - 1;
  }
  if (keyDown("down")) {
    tack.y = tack.y + 1;
  }
  if (keyDown("left")) {
    tack.x = tack.x - 1;
  }
  if (keyDown("right")) {
    tack.x = tack.x + 1;
  }
  
  drawSprites();
}
Debug: isTouching

The bunny sprite should change to a new animation when it touches the sun sprite. Figure out why the bunny doesn't react to the collision.
var sun = createSprite(200, 0);
sun.setAnimation("sun");
var bunny = createSprite(200, 300);
bunny.setAnimation("bunny_sad");

function draw() {
  background("lightblue");
  
  sun.velocityY = 2;
  if (sun.isTouching(bunny)) {
  bunny.setAnimation("bunny_happy");
}
  drawSprites();
}
Rainbow Horse

In this program, the horse should turn into a unicorn when it touches the rainbow.
// create the sprites
var horse = createSprite(200, 150);
horse.setAnimation("horse");
var rainbow = createSprite(400, 370);
rainbow.setAnimation("rainbow");
rainbow.velocityX = -5;
rainbow.velocityY = -5;
rainbow.rotateToDirection = true;

function draw() {
  // draw the background
  background("skyblue");

  //1) Change the horse into a unicorn when the rainbow touches it.

if(horse.isTouching(rainbow)){
  horse.setAnimation("unicorn");
  
}
  
  drawSprites();
}
Collision Challenges

Try out these new blocks and challenges with collisions.
Debug: Add Points on Collision

Games often give you points when two sprites touch. This program does that, but notice what happens to the score as the sprites continue to touch. Your challenge is to get it so only one point is scored. There are multiple ways to do this, but the easiest way is to move one or both sprites to a different location right when the score increases.
r points = 0;
var coin = createSprite(200, 100);
coin.setAnimation("coin");
var ghost = createSprite(200, 300);
ghost.setAnimation("ghost");

function draw() {
  //2) Identify the code that increases the score.
  if (ghost.isTouching(coin)) {
    points = points + 1;
    //3) Add a line of code so that at least one sprite moves to a new location.

  

    // Move the coin to a random new location using randomNumber()
    coin.x = randomNumber(0, 400);
    coin.y = randomNumber(0, 400);
  
  }
  background("lightblue");
  text("Points: " + points, 25, 25);
  if(keyDown("up")) {
    ghost.y = ghost.y - 5;
  }
  if(keyDown("down")) {
    ghost.y = ghost.y + 5;
  }
  if(keyDown("left")) {
    ghost.x = ghost.x - 5;
  }
  if(keyDown("right")) {
    ghost.x = ghost.x + 5;
  }

  drawSprites();
}
Lesson 21: Mini-Project - Side Scroller

// GAME SETUP
var frog = createSprite(150, 300);
frog.setAnimation("frog");
var mushroom = createSprite(450, 320);
mushroom.setAnimation("mushroom");
var targetfly = createSprite(450, randomNumber(50, 250));
targetfly.setAnimation("fly");

// Set initial velocities
mushroom.velocityX = -4;
targetfly.velocityX = -4;

// Variables
var score = 0;
var health = 100;

// Gravity constant
var gravity = 0.5;

function draw() {
    // BACKGROUND
    background("skyblue");
    fill("brown");
    rect(0, 300, 400, 100);

    // SPRITE INTERACTIONS
    if (frog.isTouching(mushroom)) {
        health -= 3;
        mushroom.x = 450;
        mushroom.y = randomNumber(10, 50);
    }
    if (frog.isTouching(targetfly)) {
        score += 3;
        targetfly.x = 450;
        targetfly.y = randomNumber(50, 250);
    }

    // JUMPING
    if (keyDown("up") && frog.y >= 300) {
        frog.velocityY = -5; // Apply upward velocity to jump
    }

    frog.velocityY += gravity; // Apply gravity to pull the frog down

    if (frog.y >= 300) { // Stop the frog when it hits the ground
        frog.velocityY = 0;
        frog.y = 300;
    }

    // LOOPING
    if (mushroom.x < 0) {
        mushroom.x = 450;
        mushroom.y = randomNumber(10, 320);
    }
    if (targetfly.x < 0) {
        targetfly.x = 450;
        targetfly.y = randomNumber(50, 250);
    }

    // DRAW SPRITES
    drawSprites();

    // SCOREBOARD
    fill("black");
    textSize(20);
    text("Score: " + score, 10, 20);
    text("Health: " + health, 300, 20);

    // GAME OVER
    if (health <= 0) {
        background("black");
        fill("green");
        textSize(50);
        text("Game Over!", 50, 200);
        noLoop();
    }
}
lesson 22 cmplex sprite movement
Velocity and the Counter Pattern

This program already makes a car move across the screen, but it's going very slowly. By using the velocityX property with the counter pattern, you can change the sprite's speed during the program. 
var car = createSprite(50, 200);
car.setAnimation("red_car");
car.velocityX = 0.2;

function draw() {
  background("gray");
  
  //1) Add code to make the car speed up.


  car.velocityX=car.velocityX+0.5;
  drawSprites();
}
Falling Rock

In this program, the rock should speed up as it falls down the screen.
var rock = createSprite(200, 50);
rock.setAnimation("rock");
rock.velocityY = 0.5;

function draw() {
  background("skyblue");
  
  //1) Add code to make the rock speed up as it falls.
rock.velocityY=rock.velocityY+0.3;
    
  drawSprites();
}
Slowing Things Down

The car is going to run into the water! You'll need to use the counter pattern to slow it down.
var car = createSprite(50, 200);
car.setAnimation("blue_car");
car.velocityX =  10;

noStroke();

function draw() {
  background("burlywood");
  fill("blue");
  rect(350,0,100,400);
  
  //1) Add code to slow the car down before it goes into the water.
car.velocityX=car.velocityX-0.25;


  drawSprites();
}
Sprite Movement Practice

Practice using the new ways to move sprites.
var bubble = createSprite(200, 350);
bubble.setAnimation("bubble");
bubble.velocityY = -0.5;

function draw() {
  background("blue");
  
  //1) Add code to make the bubble speed up as it rises.
bubble.velocityY=-5;


  drawSprites();
}
Looks like Gravity

Uh oh! The rock is thrown in the air but it never falls back down!
var rock = createSprite(200, 350);
rock.setAnimation("rock");
rock.velocityY = -10; // Initial upward velocity
rock.rotationSpeed = 2; // Add a rotation effect

// Gravity constant
var gravity = 0.5;

function draw() {
  background("skyblue");

  // Apply gravity to slow the rock down and make it fall
  rock.velocityY += gravity;

  
  

  drawSprites();
}
Deceleration

For this program, you need to make the car slow to a halt before it goes past the top of the screen.
var car = createSprite(200, 350);
car.setAnimation("car");

car.velocityY = -15; // Initial upward velocity

function draw() {
  background("forestgreen");
  fill("gray");
  rect(150, 0, 100, 400);  // The road
  
  // 1) Make the car slow down in the draw loop
  if (car.velocityY < 0) {  // If the car is moving upward
    car.velocityY += 0.4;   // Gradually reduce the upward velocity
  }
  
  // 2) Use a conditional to detect when the car's velocity is 0 or close to it
  if (car.velocityY >= -0.5) { 
    car.velocityY = 0;  // Stop the car when its velocity is near zero
    car.y = car.y;      // Hold its position
  }

  drawSprites();
}

